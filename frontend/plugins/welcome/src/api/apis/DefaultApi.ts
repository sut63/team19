/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntClassdate,
    EntClassdateFromJSON,
    EntClassdateToJSON,
    EntClassroom,
    EntClassroomFromJSON,
    EntClassroomToJSON,
    EntClasstime,
    EntClasstimeFromJSON,
    EntClasstimeToJSON,
    EntCourse,
    EntCourseFromJSON,
    EntCourseToJSON,
    EntCourseclass,
    EntCourseclassFromJSON,
    EntCourseclassToJSON,
    EntDegree,
    EntDegreeFromJSON,
    EntDegreeToJSON,
    EntDepartment,
    EntDepartmentFromJSON,
    EntDepartmentToJSON,
    EntInstructorInfo,
    EntInstructorInfoFromJSON,
    EntInstructorInfoToJSON,
    EntInstructorRoom,
    EntInstructorRoomFromJSON,
    EntInstructorRoomToJSON,
    EntSubject,
    EntSubjectFromJSON,
    EntSubjectToJSON,
    EntSubjectsOffered,
    EntSubjectsOfferedFromJSON,
    EntSubjectsOfferedToJSON,
    EntTerm,
    EntTermFromJSON,
    EntTermToJSON,
    EntTitle,
    EntTitleFromJSON,
    EntTitleToJSON,
    EntYear,
    EntYearFromJSON,
    EntYearToJSON,
} from '../models';

export interface CreateClassdateRequest {
    classdate: EntClassdate;
}

export interface CreateClassroomRequest {
    classroom: EntClassroom;
}

export interface CreateClasstimeRequest {
    classtime: EntClasstime;
}

export interface CreateCourseRequest {
    course: EntCourse;
}

export interface CreateCourseclassRequest {
    courseclass: EntCourseclass;
}

export interface CreateDegreeRequest {
    degree: EntDegree;
}

export interface CreateDepartmentRequest {
    department: EntDepartment;
}

export interface CreateInstructorinfoRequest {
    instructorinfo: EntInstructorInfo;
}

export interface CreateInstructorroomRequest {
    instructorroom: EntInstructorRoom;
}

export interface CreateSubjectRequest {
    subject: EntSubject;
}

export interface CreateSubjectsOfferedRequest {
    subjectsoffered: EntSubjectsOffered;
}

export interface CreateTermRequest {
    term: EntTerm;
}

export interface CreateTitleRequest {
    title: EntTitle;
}

export interface CreateYearRequest {
    year: EntYear;
}

export interface DeleteCourseRequest {
    id: number;
}

export interface DeleteCourseclassRequest {
    id: number;
}

export interface DeleteInstructorinfoRequest {
    id: number;
}

export interface DeleteSubjectsOfferedRequest {
    id: number;
}

export interface DeleteTermRequest {
    id: number;
}

export interface DeleteYearRequest {
    id: number;
}

export interface GetClassdateRequest {
    id: number;
}

export interface GetClassroomRequest {
    id: number;
}

export interface GetClasstimeRequest {
    id: number;
}

export interface GetCourseRequest {
    id: number;
}

export interface GetCourseclassRequest {
    id: number;
}

export interface GetDegreeRequest {
    id: number;
}

export interface GetDepartmentRequest {
    id: number;
}

export interface GetInstructorinfoRequest {
    id: number;
}

export interface GetInstructorroomRequest {
    id: number;
}

export interface GetSubjectRequest {
    id: number;
}

export interface GetSubjectsOfferedRequest {
    id: number;
}

export interface GetTermRequest {
    id: number;
}

export interface GetTitleRequest {
    id: number;
}

export interface GetYearRequest {
    id: number;
}

export interface ListClassdateRequest {
    limit?: number;
    offset?: number;
}

export interface ListClassroomRequest {
    limit?: number;
    offset?: number;
}

export interface ListClasstimeRequest {
    limit?: number;
    offset?: number;
}

export interface ListCourseRequest {
    limit?: number;
    offset?: number;
}

export interface ListCourseclassRequest {
    limit?: number;
    offset?: number;
}

export interface ListDegreeRequest {
    limit?: number;
    offset?: number;
}

export interface ListDepartmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListInstructorinfoRequest {
    limit?: number;
    offset?: number;
}

export interface ListInstructorroomRequest {
    limit?: number;
    offset?: number;
}

export interface ListSubjectRequest {
    limit?: number;
    offset?: number;
}

export interface ListSubjectsOfferedRequest {
    limit?: number;
    offset?: number;
}

export interface ListTermRequest {
    limit?: number;
    offset?: number;
}

export interface ListTitleRequest {
    limit?: number;
    offset?: number;
}

export interface ListYearRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateCourseRequest {
    id: number;
    course: EntCourse;
}

export interface UpdateCourseclassRequest {
    id: number;
    courseclass: EntCourseclass;
}

export interface UpdateInstructorinfoRequest {
    id: number;
    instructorinfo: EntInstructorInfo;
}

export interface UpdateSubjectsOfferedRequest {
    id: number;
    subjectsOffered: EntSubjectsOffered;
}

export interface UpdateTermRequest {
    id: number;
    term: EntTerm;
}

export interface UpdateYearRequest {
    id: number;
    year: EntYear;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create classdate
     * Create classdate
     */
    async createClassdateRaw(requestParameters: CreateClassdateRequest): Promise<runtime.ApiResponse<EntClassdate>> {
        if (requestParameters.classdate === null || requestParameters.classdate === undefined) {
            throw new runtime.RequiredError('classdate','Required parameter requestParameters.classdate was null or undefined when calling createClassdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/classdates`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntClassdateToJSON(requestParameters.classdate),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClassdateFromJSON(jsonValue));
    }

    /**
     * Create classdate
     * Create classdate
     */
    async createClassdate(requestParameters: CreateClassdateRequest): Promise<EntClassdate> {
        const response = await this.createClassdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create classroom
     * Create classroom
     */
    async createClassroomRaw(requestParameters: CreateClassroomRequest): Promise<runtime.ApiResponse<EntClassroom>> {
        if (requestParameters.classroom === null || requestParameters.classroom === undefined) {
            throw new runtime.RequiredError('classroom','Required parameter requestParameters.classroom was null or undefined when calling createClassroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/classrooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntClassroomToJSON(requestParameters.classroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClassroomFromJSON(jsonValue));
    }

    /**
     * Create classroom
     * Create classroom
     */
    async createClassroom(requestParameters: CreateClassroomRequest): Promise<EntClassroom> {
        const response = await this.createClassroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create classtime
     * Create classtime
     */
    async createClasstimeRaw(requestParameters: CreateClasstimeRequest): Promise<runtime.ApiResponse<EntClasstime>> {
        if (requestParameters.classtime === null || requestParameters.classtime === undefined) {
            throw new runtime.RequiredError('classtime','Required parameter requestParameters.classtime was null or undefined when calling createClasstime.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/classtimes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntClasstimeToJSON(requestParameters.classtime),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClasstimeFromJSON(jsonValue));
    }

    /**
     * Create classtime
     * Create classtime
     */
    async createClasstime(requestParameters: CreateClasstimeRequest): Promise<EntClasstime> {
        const response = await this.createClasstimeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create course
     * Create course
     */
    async createCourseRaw(requestParameters: CreateCourseRequest): Promise<runtime.ApiResponse<EntCourse>> {
        if (requestParameters.course === null || requestParameters.course === undefined) {
            throw new runtime.RequiredError('course','Required parameter requestParameters.course was null or undefined when calling createCourse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCourseToJSON(requestParameters.course),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCourseFromJSON(jsonValue));
    }

    /**
     * Create course
     * Create course
     */
    async createCourse(requestParameters: CreateCourseRequest): Promise<EntCourse> {
        const response = await this.createCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create courseclass
     * Create courseclass
     */
    async createCourseclassRaw(requestParameters: CreateCourseclassRequest): Promise<runtime.ApiResponse<EntCourseclass>> {
        if (requestParameters.courseclass === null || requestParameters.courseclass === undefined) {
            throw new runtime.RequiredError('courseclass','Required parameter requestParameters.courseclass was null or undefined when calling createCourseclass.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/courseclasss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntCourseclassToJSON(requestParameters.courseclass),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCourseclassFromJSON(jsonValue));
    }

    /**
     * Create courseclass
     * Create courseclass
     */
    async createCourseclass(requestParameters: CreateCourseclassRequest): Promise<EntCourseclass> {
        const response = await this.createCourseclassRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create degree
     * Create degree
     */
    async createDegreeRaw(requestParameters: CreateDegreeRequest): Promise<runtime.ApiResponse<EntDegree>> {
        if (requestParameters.degree === null || requestParameters.degree === undefined) {
            throw new runtime.RequiredError('degree','Required parameter requestParameters.degree was null or undefined when calling createDegree.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/degrees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDegreeToJSON(requestParameters.degree),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDegreeFromJSON(jsonValue));
    }

    /**
     * Create degree
     * Create degree
     */
    async createDegree(requestParameters: CreateDegreeRequest): Promise<EntDegree> {
        const response = await this.createDegreeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create department
     * Create department
     */
    async createDepartmentRaw(requestParameters: CreateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling createDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * Create department
     * Create department
     */
    async createDepartment(requestParameters: CreateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.createDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create instructorinfo
     * Create instructorinfo
     */
    async createInstructorinfoRaw(requestParameters: CreateInstructorinfoRequest): Promise<runtime.ApiResponse<EntInstructorInfo>> {
        if (requestParameters.instructorinfo === null || requestParameters.instructorinfo === undefined) {
            throw new runtime.RequiredError('instructorinfo','Required parameter requestParameters.instructorinfo was null or undefined when calling createInstructorinfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/instructorinfos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntInstructorInfoToJSON(requestParameters.instructorinfo),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInstructorInfoFromJSON(jsonValue));
    }

    /**
     * Create instructorinfo
     * Create instructorinfo
     */
    async createInstructorinfo(requestParameters: CreateInstructorinfoRequest): Promise<EntInstructorInfo> {
        const response = await this.createInstructorinfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create instructorroom
     * Create instructorroom
     */
    async createInstructorroomRaw(requestParameters: CreateInstructorroomRequest): Promise<runtime.ApiResponse<EntInstructorRoom>> {
        if (requestParameters.instructorroom === null || requestParameters.instructorroom === undefined) {
            throw new runtime.RequiredError('instructorroom','Required parameter requestParameters.instructorroom was null or undefined when calling createInstructorroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/instructorrooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntInstructorRoomToJSON(requestParameters.instructorroom),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInstructorRoomFromJSON(jsonValue));
    }

    /**
     * Create instructorroom
     * Create instructorroom
     */
    async createInstructorroom(requestParameters: CreateInstructorroomRequest): Promise<EntInstructorRoom> {
        const response = await this.createInstructorroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create subject
     * Create subject
     */
    async createSubjectRaw(requestParameters: CreateSubjectRequest): Promise<runtime.ApiResponse<EntSubject>> {
        if (requestParameters.subject === null || requestParameters.subject === undefined) {
            throw new runtime.RequiredError('subject','Required parameter requestParameters.subject was null or undefined when calling createSubject.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/subjects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSubjectToJSON(requestParameters.subject),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSubjectFromJSON(jsonValue));
    }

    /**
     * Create subject
     * Create subject
     */
    async createSubject(requestParameters: CreateSubjectRequest): Promise<EntSubject> {
        const response = await this.createSubjectRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create SubjectsOffered
     * Create SubjectsOffered
     */
    async createSubjectsOfferedRaw(requestParameters: CreateSubjectsOfferedRequest): Promise<runtime.ApiResponse<EntSubjectsOffered>> {
        if (requestParameters.subjectsoffered === null || requestParameters.subjectsoffered === undefined) {
            throw new runtime.RequiredError('subjectsoffered','Required parameter requestParameters.subjectsoffered was null or undefined when calling createSubjectsOffered.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/SubjectsOffereds`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSubjectsOfferedToJSON(requestParameters.subjectsoffered),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSubjectsOfferedFromJSON(jsonValue));
    }

    /**
     * Create SubjectsOffered
     * Create SubjectsOffered
     */
    async createSubjectsOffered(requestParameters: CreateSubjectsOfferedRequest): Promise<EntSubjectsOffered> {
        const response = await this.createSubjectsOfferedRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create term
     * Create term
     */
    async createTermRaw(requestParameters: CreateTermRequest): Promise<runtime.ApiResponse<EntTerm>> {
        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling createTerm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/terms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntTermToJSON(requestParameters.term),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTermFromJSON(jsonValue));
    }

    /**
     * Create term
     * Create term
     */
    async createTerm(requestParameters: CreateTermRequest): Promise<EntTerm> {
        const response = await this.createTermRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create title
     * Create title
     */
    async createTitleRaw(requestParameters: CreateTitleRequest): Promise<runtime.ApiResponse<EntTitle>> {
        if (requestParameters.title === null || requestParameters.title === undefined) {
            throw new runtime.RequiredError('title','Required parameter requestParameters.title was null or undefined when calling createTitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/titles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntTitleToJSON(requestParameters.title),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTitleFromJSON(jsonValue));
    }

    /**
     * Create title
     * Create title
     */
    async createTitle(requestParameters: CreateTitleRequest): Promise<EntTitle> {
        const response = await this.createTitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create year
     * Create year
     */
    async createYearRaw(requestParameters: CreateYearRequest): Promise<runtime.ApiResponse<EntYear>> {
        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling createYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/years`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntYearToJSON(requestParameters.year),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntYearFromJSON(jsonValue));
    }

    /**
     * Create year
     * Create year
     */
    async createYear(requestParameters: CreateYearRequest): Promise<EntYear> {
        const response = await this.createYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * get course by ID
     * Delete a course entity by ID
     */
    async deleteCourseRaw(requestParameters: DeleteCourseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCourse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/courses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get course by ID
     * Delete a course entity by ID
     */
    async deleteCourse(requestParameters: DeleteCourseRequest): Promise<object> {
        const response = await this.deleteCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get courseclass by ID
     * Delete a courseclass entity by ID
     */
    async deleteCourseclassRaw(requestParameters: DeleteCourseclassRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteCourseclass.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/courseclasss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get courseclass by ID
     * Delete a courseclass entity by ID
     */
    async deleteCourseclass(requestParameters: DeleteCourseclassRequest): Promise<object> {
        const response = await this.deleteCourseclassRaw(requestParameters);
        return await response.value();
    }

    /**
     * get instructorinfo by ID
     * Delete a instructorinfo entity by ID
     */
    async deleteInstructorinfoRaw(requestParameters: DeleteInstructorinfoRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteInstructorinfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/instructorinfos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get instructorinfo by ID
     * Delete a instructorinfo entity by ID
     */
    async deleteInstructorinfo(requestParameters: DeleteInstructorinfoRequest): Promise<object> {
        const response = await this.deleteInstructorinfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * get SubjectsOffered by ID
     * Delete a SubjectsOffered entity by ID
     */
    async deleteSubjectsOfferedRaw(requestParameters: DeleteSubjectsOfferedRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSubjectsOffered.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/SubjectsOffereds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get SubjectsOffered by ID
     * Delete a SubjectsOffered entity by ID
     */
    async deleteSubjectsOffered(requestParameters: DeleteSubjectsOfferedRequest): Promise<object> {
        const response = await this.deleteSubjectsOfferedRaw(requestParameters);
        return await response.value();
    }

    /**
     * get term by ID
     * Delete a term entity by ID
     */
    async deleteTermRaw(requestParameters: DeleteTermRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTerm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/terms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get term by ID
     * Delete a term entity by ID
     */
    async deleteTerm(requestParameters: DeleteTermRequest): Promise<object> {
        const response = await this.deleteTermRaw(requestParameters);
        return await response.value();
    }

    /**
     * get year by ID
     * Delete a year entity by ID
     */
    async deleteYearRaw(requestParameters: DeleteYearRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/years/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get year by ID
     * Delete a year entity by ID
     */
    async deleteYear(requestParameters: DeleteYearRequest): Promise<object> {
        const response = await this.deleteYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * get classdate by ID
     * Get a classdate entity by ID
     */
    async getClassdateRaw(requestParameters: GetClassdateRequest): Promise<runtime.ApiResponse<EntClassdate>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClassdate.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/classdates/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClassdateFromJSON(jsonValue));
    }

    /**
     * get classdate by ID
     * Get a classdate entity by ID
     */
    async getClassdate(requestParameters: GetClassdateRequest): Promise<EntClassdate> {
        const response = await this.getClassdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * get classroom by ID
     * Get a classroom entity by ID
     */
    async getClassroomRaw(requestParameters: GetClassroomRequest): Promise<runtime.ApiResponse<EntClassroom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClassroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/classrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClassroomFromJSON(jsonValue));
    }

    /**
     * get classroom by ID
     * Get a classroom entity by ID
     */
    async getClassroom(requestParameters: GetClassroomRequest): Promise<EntClassroom> {
        const response = await this.getClassroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get classtime by ID
     * Get a classtime entity by ID
     */
    async getClasstimeRaw(requestParameters: GetClasstimeRequest): Promise<runtime.ApiResponse<EntClasstime>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClasstime.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/classtimes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntClasstimeFromJSON(jsonValue));
    }

    /**
     * get classtime by ID
     * Get a classtime entity by ID
     */
    async getClasstime(requestParameters: GetClasstimeRequest): Promise<EntClasstime> {
        const response = await this.getClasstimeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get course by ID
     * Get a course entity by ID
     */
    async getCourseRaw(requestParameters: GetCourseRequest): Promise<runtime.ApiResponse<Array<EntCourse>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCourse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/courses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCourseFromJSON));
    }

    /**
     * get course by ID
     * Get a course entity by ID
     */
    async getCourse(requestParameters: GetCourseRequest): Promise<Array<EntCourse>> {
        const response = await this.getCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get courseclass by ID
     * Get a courseclass entity by ID
     */
    async getCourseclassRaw(requestParameters: GetCourseclassRequest): Promise<runtime.ApiResponse<Array<EntCourseclass>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCourseclass.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/courseclasss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCourseclassFromJSON));
    }

    /**
     * get courseclass by ID
     * Get a courseclass entity by ID
     */
    async getCourseclass(requestParameters: GetCourseclassRequest): Promise<Array<EntCourseclass>> {
        const response = await this.getCourseclassRaw(requestParameters);
        return await response.value();
    }

    /**
     * get degree by ID
     * Get a degree entity by ID
     */
    async getDegreeRaw(requestParameters: GetDegreeRequest): Promise<runtime.ApiResponse<EntDegree>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDegree.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/degrees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDegreeFromJSON(jsonValue));
    }

    /**
     * get degree by ID
     * Get a degree entity by ID
     */
    async getDegree(requestParameters: GetDegreeRequest): Promise<EntDegree> {
        const response = await this.getDegreeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartmentRaw(requestParameters: GetDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartment(requestParameters: GetDepartmentRequest): Promise<EntDepartment> {
        const response = await this.getDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get instructorinfo by ID
     * Get a instructorinfo entity by ID
     */
    async getInstructorinfoRaw(requestParameters: GetInstructorinfoRequest): Promise<runtime.ApiResponse<Array<EntInstructorInfo>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInstructorinfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/instructorinfos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntInstructorInfoFromJSON));
    }

    /**
     * get instructorinfo by ID
     * Get a instructorinfo entity by ID
     */
    async getInstructorinfo(requestParameters: GetInstructorinfoRequest): Promise<Array<EntInstructorInfo>> {
        const response = await this.getInstructorinfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * get instructorroom by ID
     * Get a instructorroom entity by ID
     */
    async getInstructorroomRaw(requestParameters: GetInstructorroomRequest): Promise<runtime.ApiResponse<EntInstructorRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInstructorroom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/instructorrooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInstructorRoomFromJSON(jsonValue));
    }

    /**
     * get instructorroom by ID
     * Get a instructorroom entity by ID
     */
    async getInstructorroom(requestParameters: GetInstructorroomRequest): Promise<EntInstructorRoom> {
        const response = await this.getInstructorroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get subject by ID
     * Get a subject entity by ID
     */
    async getSubjectRaw(requestParameters: GetSubjectRequest): Promise<runtime.ApiResponse<EntSubject>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSubject.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subjects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSubjectFromJSON(jsonValue));
    }

    /**
     * get subject by ID
     * Get a subject entity by ID
     */
    async getSubject(requestParameters: GetSubjectRequest): Promise<EntSubject> {
        const response = await this.getSubjectRaw(requestParameters);
        return await response.value();
    }

    /**
     * get SubjectsOffered by ID
     * Get a SubjectsOffered entity by ID
     */
    async getSubjectsOfferedRaw(requestParameters: GetSubjectsOfferedRequest): Promise<runtime.ApiResponse<Array<EntSubjectsOffered>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSubjectsOffered.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/SubjectsOffereds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSubjectsOfferedFromJSON));
    }

    /**
     * get SubjectsOffered by ID
     * Get a SubjectsOffered entity by ID
     */
    async getSubjectsOffered(requestParameters: GetSubjectsOfferedRequest): Promise<Array<EntSubjectsOffered>> {
        const response = await this.getSubjectsOfferedRaw(requestParameters);
        return await response.value();
    }

    /**
     * get term by ID
     * Get a term entity by ID
     */
    async getTermRaw(requestParameters: GetTermRequest): Promise<runtime.ApiResponse<EntTerm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTerm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/terms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTermFromJSON(jsonValue));
    }

    /**
     * get term by ID
     * Get a term entity by ID
     */
    async getTerm(requestParameters: GetTermRequest): Promise<EntTerm> {
        const response = await this.getTermRaw(requestParameters);
        return await response.value();
    }

    /**
     * get title by ID
     * Get a title entity by ID
     */
    async getTitleRaw(requestParameters: GetTitleRequest): Promise<runtime.ApiResponse<EntTitle>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTitle.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/titles/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTitleFromJSON(jsonValue));
    }

    /**
     * get title by ID
     * Get a title entity by ID
     */
    async getTitle(requestParameters: GetTitleRequest): Promise<EntTitle> {
        const response = await this.getTitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * get year by ID
     * Get a year entity by ID
     */
    async getYearRaw(requestParameters: GetYearRequest): Promise<runtime.ApiResponse<EntYear>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/years/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntYearFromJSON(jsonValue));
    }

    /**
     * get year by ID
     * Get a year entity by ID
     */
    async getYear(requestParameters: GetYearRequest): Promise<EntYear> {
        const response = await this.getYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * list classdate entities
     * List classdate entities
     */
    async listClassdateRaw(requestParameters: ListClassdateRequest): Promise<runtime.ApiResponse<Array<EntClassdate>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/classdates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClassdateFromJSON));
    }

    /**
     * list classdate entities
     * List classdate entities
     */
    async listClassdate(requestParameters: ListClassdateRequest): Promise<Array<EntClassdate>> {
        const response = await this.listClassdateRaw(requestParameters);
        return await response.value();
    }

    /**
     * list classroom entities
     * List classroom entities
     */
    async listClassroomRaw(requestParameters: ListClassroomRequest): Promise<runtime.ApiResponse<Array<EntClassroom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/classrooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClassroomFromJSON));
    }

    /**
     * list classroom entities
     * List classroom entities
     */
    async listClassroom(requestParameters: ListClassroomRequest): Promise<Array<EntClassroom>> {
        const response = await this.listClassroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list classtime entities
     * List classtime entities
     */
    async listClasstimeRaw(requestParameters: ListClasstimeRequest): Promise<runtime.ApiResponse<Array<EntClasstime>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/classtimes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntClasstimeFromJSON));
    }

    /**
     * list classtime entities
     * List classtime entities
     */
    async listClasstime(requestParameters: ListClasstimeRequest): Promise<Array<EntClasstime>> {
        const response = await this.listClasstimeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list course entities
     * List course entities
     */
    async listCourseRaw(requestParameters: ListCourseRequest): Promise<runtime.ApiResponse<Array<EntCourse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/courses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCourseFromJSON));
    }

    /**
     * list course entities
     * List course entities
     */
    async listCourse(requestParameters: ListCourseRequest): Promise<Array<EntCourse>> {
        const response = await this.listCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list courseclass entities
     * List courseclass entities
     */
    async listCourseclassRaw(requestParameters: ListCourseclassRequest): Promise<runtime.ApiResponse<Array<EntCourseclass>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/courseclasss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCourseclassFromJSON));
    }

    /**
     * list courseclass entities
     * List courseclass entities
     */
    async listCourseclass(requestParameters: ListCourseclassRequest): Promise<Array<EntCourseclass>> {
        const response = await this.listCourseclassRaw(requestParameters);
        return await response.value();
    }

    /**
     * list degree entities
     * List degree entities
     */
    async listDegreeRaw(requestParameters: ListDegreeRequest): Promise<runtime.ApiResponse<Array<EntDegree>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/degrees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDegreeFromJSON));
    }

    /**
     * list degree entities
     * List degree entities
     */
    async listDegree(requestParameters: ListDegreeRequest): Promise<Array<EntDegree>> {
        const response = await this.listDegreeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartmentRaw(requestParameters: ListDepartmentRequest): Promise<runtime.ApiResponse<Array<EntDepartment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDepartmentFromJSON));
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartment(requestParameters: ListDepartmentRequest): Promise<Array<EntDepartment>> {
        const response = await this.listDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list instructorinfo entities
     * List instructorinfo entities
     */
    async listInstructorinfoRaw(requestParameters: ListInstructorinfoRequest): Promise<runtime.ApiResponse<Array<EntInstructorInfo>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/instructorinfos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntInstructorInfoFromJSON));
    }

    /**
     * list instructorinfo entities
     * List instructorinfo entities
     */
    async listInstructorinfo(requestParameters: ListInstructorinfoRequest): Promise<Array<EntInstructorInfo>> {
        const response = await this.listInstructorinfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * list instructorroom entities
     * List instructorroom entities
     */
    async listInstructorroomRaw(requestParameters: ListInstructorroomRequest): Promise<runtime.ApiResponse<Array<EntInstructorRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/instructorrooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntInstructorRoomFromJSON));
    }

    /**
     * list instructorroom entities
     * List instructorroom entities
     */
    async listInstructorroom(requestParameters: ListInstructorroomRequest): Promise<Array<EntInstructorRoom>> {
        const response = await this.listInstructorroomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list subject entities
     * List subject entities
     */
    async listSubjectRaw(requestParameters: ListSubjectRequest): Promise<runtime.ApiResponse<Array<EntSubject>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subjects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSubjectFromJSON));
    }

    /**
     * list subject entities
     * List subject entities
     */
    async listSubject(requestParameters: ListSubjectRequest): Promise<Array<EntSubject>> {
        const response = await this.listSubjectRaw(requestParameters);
        return await response.value();
    }

    /**
     * list SubjectsOffered entities
     * List SubjectsOffered entities
     */
    async listSubjectsOfferedRaw(requestParameters: ListSubjectsOfferedRequest): Promise<runtime.ApiResponse<Array<EntSubjectsOffered>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/SubjectsOffereds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSubjectsOfferedFromJSON));
    }

    /**
     * list SubjectsOffered entities
     * List SubjectsOffered entities
     */
    async listSubjectsOffered(requestParameters: ListSubjectsOfferedRequest): Promise<Array<EntSubjectsOffered>> {
        const response = await this.listSubjectsOfferedRaw(requestParameters);
        return await response.value();
    }

    /**
     * list term entities
     * List term entities
     */
    async listTermRaw(requestParameters: ListTermRequest): Promise<runtime.ApiResponse<Array<EntTerm>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/terms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTermFromJSON));
    }

    /**
     * list term entities
     * List term entities
     */
    async listTerm(requestParameters: ListTermRequest): Promise<Array<EntTerm>> {
        const response = await this.listTermRaw(requestParameters);
        return await response.value();
    }

    /**
     * list title entities
     * List title entities
     */
    async listTitleRaw(requestParameters: ListTitleRequest): Promise<runtime.ApiResponse<Array<EntTitle>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/titles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTitleFromJSON));
    }

    /**
     * list title entities
     * List title entities
     */
    async listTitle(requestParameters: ListTitleRequest): Promise<Array<EntTitle>> {
        const response = await this.listTitleRaw(requestParameters);
        return await response.value();
    }

    /**
     * list year entities
     * List year entities
     */
    async listYearRaw(requestParameters: ListYearRequest): Promise<runtime.ApiResponse<Array<EntYear>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/years`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntYearFromJSON));
    }

    /**
     * list year entities
     * List year entities
     */
    async listYear(requestParameters: ListYearRequest): Promise<Array<EntYear>> {
        const response = await this.listYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * update course by ID
     * Update a course entity by ID
     */
    async updateCourseRaw(requestParameters: UpdateCourseRequest): Promise<runtime.ApiResponse<EntCourse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCourse.');
        }

        if (requestParameters.course === null || requestParameters.course === undefined) {
            throw new runtime.RequiredError('course','Required parameter requestParameters.course was null or undefined when calling updateCourse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/courses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCourseToJSON(requestParameters.course),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCourseFromJSON(jsonValue));
    }

    /**
     * update course by ID
     * Update a course entity by ID
     */
    async updateCourse(requestParameters: UpdateCourseRequest): Promise<EntCourse> {
        const response = await this.updateCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * update courseclass by ID
     * Update a courseclass entity by ID
     */
    async updateCourseclassRaw(requestParameters: UpdateCourseclassRequest): Promise<runtime.ApiResponse<EntCourseclass>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCourseclass.');
        }

        if (requestParameters.courseclass === null || requestParameters.courseclass === undefined) {
            throw new runtime.RequiredError('courseclass','Required parameter requestParameters.courseclass was null or undefined when calling updateCourseclass.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/courseclasss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntCourseclassToJSON(requestParameters.courseclass),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCourseclassFromJSON(jsonValue));
    }

    /**
     * update courseclass by ID
     * Update a courseclass entity by ID
     */
    async updateCourseclass(requestParameters: UpdateCourseclassRequest): Promise<EntCourseclass> {
        const response = await this.updateCourseclassRaw(requestParameters);
        return await response.value();
    }

    /**
     * update instructorinfo by ID
     * Update a instructorinfo entity by ID
     */
    async updateInstructorinfoRaw(requestParameters: UpdateInstructorinfoRequest): Promise<runtime.ApiResponse<EntInstructorInfo>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateInstructorinfo.');
        }

        if (requestParameters.instructorinfo === null || requestParameters.instructorinfo === undefined) {
            throw new runtime.RequiredError('instructorinfo','Required parameter requestParameters.instructorinfo was null or undefined when calling updateInstructorinfo.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/instructorinfos/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntInstructorInfoToJSON(requestParameters.instructorinfo),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInstructorInfoFromJSON(jsonValue));
    }

    /**
     * update instructorinfo by ID
     * Update a instructorinfo entity by ID
     */
    async updateInstructorinfo(requestParameters: UpdateInstructorinfoRequest): Promise<EntInstructorInfo> {
        const response = await this.updateInstructorinfoRaw(requestParameters);
        return await response.value();
    }

    /**
     * update SubjectsOffered by ID
     * Update a SubjectsOffered entity by ID
     */
    async updateSubjectsOfferedRaw(requestParameters: UpdateSubjectsOfferedRequest): Promise<runtime.ApiResponse<EntSubjectsOffered>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSubjectsOffered.');
        }

        if (requestParameters.subjectsOffered === null || requestParameters.subjectsOffered === undefined) {
            throw new runtime.RequiredError('subjectsOffered','Required parameter requestParameters.subjectsOffered was null or undefined when calling updateSubjectsOffered.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/SubjectsOffereds/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntSubjectsOfferedToJSON(requestParameters.subjectsOffered),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSubjectsOfferedFromJSON(jsonValue));
    }

    /**
     * update SubjectsOffered by ID
     * Update a SubjectsOffered entity by ID
     */
    async updateSubjectsOffered(requestParameters: UpdateSubjectsOfferedRequest): Promise<EntSubjectsOffered> {
        const response = await this.updateSubjectsOfferedRaw(requestParameters);
        return await response.value();
    }

    /**
     * update term by ID
     * Update a term entity by ID
     */
    async updateTermRaw(requestParameters: UpdateTermRequest): Promise<runtime.ApiResponse<EntTerm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTerm.');
        }

        if (requestParameters.term === null || requestParameters.term === undefined) {
            throw new runtime.RequiredError('term','Required parameter requestParameters.term was null or undefined when calling updateTerm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/terms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntTermToJSON(requestParameters.term),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTermFromJSON(jsonValue));
    }

    /**
     * update term by ID
     * Update a term entity by ID
     */
    async updateTerm(requestParameters: UpdateTermRequest): Promise<EntTerm> {
        const response = await this.updateTermRaw(requestParameters);
        return await response.value();
    }

    /**
     * update year by ID
     * Update a year entity by ID
     */
    async updateYearRaw(requestParameters: UpdateYearRequest): Promise<runtime.ApiResponse<EntYear>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateYear.');
        }

        if (requestParameters.year === null || requestParameters.year === undefined) {
            throw new runtime.RequiredError('year','Required parameter requestParameters.year was null or undefined when calling updateYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/years/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntYearToJSON(requestParameters.year),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntYearFromJSON(jsonValue));
    }

    /**
     * update year by ID
     * Update a year entity by ID
     */
    async updateYear(requestParameters: UpdateYearRequest): Promise<EntYear> {
        const response = await this.updateYearRaw(requestParameters);
        return await response.value();
    }

}
