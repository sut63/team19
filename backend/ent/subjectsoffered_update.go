// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team19/app/ent/degree"
	"github.com/team19/app/ent/predicate"
	"github.com/team19/app/ent/subject"
	"github.com/team19/app/ent/subjectsoffered"
	"github.com/team19/app/ent/term"
	"github.com/team19/app/ent/year"
)

// SubjectsOfferedUpdate is the builder for updating SubjectsOffered entities.
type SubjectsOfferedUpdate struct {
	config
	hooks      []Hook
	mutation   *SubjectsOfferedMutation
	predicates []predicate.SubjectsOffered
}

// Where adds a new predicate for the builder.
func (sou *SubjectsOfferedUpdate) Where(ps ...predicate.SubjectsOffered) *SubjectsOfferedUpdate {
	sou.predicates = append(sou.predicates, ps...)
	return sou
}

// SetAMOUNT sets the AMOUNT field.
func (sou *SubjectsOfferedUpdate) SetAMOUNT(i int) *SubjectsOfferedUpdate {
	sou.mutation.ResetAMOUNT()
	sou.mutation.SetAMOUNT(i)
	return sou
}

// AddAMOUNT adds i to AMOUNT.
func (sou *SubjectsOfferedUpdate) AddAMOUNT(i int) *SubjectsOfferedUpdate {
	sou.mutation.AddAMOUNT(i)
	return sou
}

// SetSTATUS sets the STATUS field.
func (sou *SubjectsOfferedUpdate) SetSTATUS(b bool) *SubjectsOfferedUpdate {
	sou.mutation.SetSTATUS(b)
	return sou
}

// SetNillableSTATUS sets the STATUS field if the given value is not nil.
func (sou *SubjectsOfferedUpdate) SetNillableSTATUS(b *bool) *SubjectsOfferedUpdate {
	if b != nil {
		sou.SetSTATUS(*b)
	}
	return sou
}

// SetRemain sets the Remain field.
func (sou *SubjectsOfferedUpdate) SetRemain(i int) *SubjectsOfferedUpdate {
	sou.mutation.ResetRemain()
	sou.mutation.SetRemain(i)
	return sou
}

// AddRemain adds i to Remain.
func (sou *SubjectsOfferedUpdate) AddRemain(i int) *SubjectsOfferedUpdate {
	sou.mutation.AddRemain(i)
	return sou
}

// SetSubjectID sets the Subject edge to Subject by id.
func (sou *SubjectsOfferedUpdate) SetSubjectID(id int) *SubjectsOfferedUpdate {
	sou.mutation.SetSubjectID(id)
	return sou
}

// SetNillableSubjectID sets the Subject edge to Subject by id if the given value is not nil.
func (sou *SubjectsOfferedUpdate) SetNillableSubjectID(id *int) *SubjectsOfferedUpdate {
	if id != nil {
		sou = sou.SetSubjectID(*id)
	}
	return sou
}

// SetSubject sets the Subject edge to Subject.
func (sou *SubjectsOfferedUpdate) SetSubject(s *Subject) *SubjectsOfferedUpdate {
	return sou.SetSubjectID(s.ID)
}

// SetDegreeID sets the Degree edge to Degree by id.
func (sou *SubjectsOfferedUpdate) SetDegreeID(id int) *SubjectsOfferedUpdate {
	sou.mutation.SetDegreeID(id)
	return sou
}

// SetNillableDegreeID sets the Degree edge to Degree by id if the given value is not nil.
func (sou *SubjectsOfferedUpdate) SetNillableDegreeID(id *int) *SubjectsOfferedUpdate {
	if id != nil {
		sou = sou.SetDegreeID(*id)
	}
	return sou
}

// SetDegree sets the Degree edge to Degree.
func (sou *SubjectsOfferedUpdate) SetDegree(d *Degree) *SubjectsOfferedUpdate {
	return sou.SetDegreeID(d.ID)
}

// SetYearID sets the Year edge to Year by id.
func (sou *SubjectsOfferedUpdate) SetYearID(id int) *SubjectsOfferedUpdate {
	sou.mutation.SetYearID(id)
	return sou
}

// SetNillableYearID sets the Year edge to Year by id if the given value is not nil.
func (sou *SubjectsOfferedUpdate) SetNillableYearID(id *int) *SubjectsOfferedUpdate {
	if id != nil {
		sou = sou.SetYearID(*id)
	}
	return sou
}

// SetYear sets the Year edge to Year.
func (sou *SubjectsOfferedUpdate) SetYear(y *Year) *SubjectsOfferedUpdate {
	return sou.SetYearID(y.ID)
}

// SetTermID sets the Term edge to Term by id.
func (sou *SubjectsOfferedUpdate) SetTermID(id int) *SubjectsOfferedUpdate {
	sou.mutation.SetTermID(id)
	return sou
}

// SetNillableTermID sets the Term edge to Term by id if the given value is not nil.
func (sou *SubjectsOfferedUpdate) SetNillableTermID(id *int) *SubjectsOfferedUpdate {
	if id != nil {
		sou = sou.SetTermID(*id)
	}
	return sou
}

// SetTerm sets the Term edge to Term.
func (sou *SubjectsOfferedUpdate) SetTerm(t *Term) *SubjectsOfferedUpdate {
	return sou.SetTermID(t.ID)
}

// Mutation returns the SubjectsOfferedMutation object of the builder.
func (sou *SubjectsOfferedUpdate) Mutation() *SubjectsOfferedMutation {
	return sou.mutation
}

// ClearSubject clears the Subject edge to Subject.
func (sou *SubjectsOfferedUpdate) ClearSubject() *SubjectsOfferedUpdate {
	sou.mutation.ClearSubject()
	return sou
}

// ClearDegree clears the Degree edge to Degree.
func (sou *SubjectsOfferedUpdate) ClearDegree() *SubjectsOfferedUpdate {
	sou.mutation.ClearDegree()
	return sou
}

// ClearYear clears the Year edge to Year.
func (sou *SubjectsOfferedUpdate) ClearYear() *SubjectsOfferedUpdate {
	sou.mutation.ClearYear()
	return sou
}

// ClearTerm clears the Term edge to Term.
func (sou *SubjectsOfferedUpdate) ClearTerm() *SubjectsOfferedUpdate {
	sou.mutation.ClearTerm()
	return sou
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (sou *SubjectsOfferedUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := sou.mutation.AMOUNT(); ok {
		if err := subjectsoffered.AMOUNTValidator(v); err != nil {
			return 0, &ValidationError{Name: "AMOUNT", err: fmt.Errorf("ent: validator failed for field \"AMOUNT\": %w", err)}
		}
	}
	if v, ok := sou.mutation.Remain(); ok {
		if err := subjectsoffered.RemainValidator(v); err != nil {
			return 0, &ValidationError{Name: "Remain", err: fmt.Errorf("ent: validator failed for field \"Remain\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(sou.hooks) == 0 {
		affected, err = sou.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectsOfferedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sou.mutation = mutation
			affected, err = sou.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sou.hooks) - 1; i >= 0; i-- {
			mut = sou.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sou.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sou *SubjectsOfferedUpdate) SaveX(ctx context.Context) int {
	affected, err := sou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sou *SubjectsOfferedUpdate) Exec(ctx context.Context) error {
	_, err := sou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sou *SubjectsOfferedUpdate) ExecX(ctx context.Context) {
	if err := sou.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sou *SubjectsOfferedUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subjectsoffered.Table,
			Columns: subjectsoffered.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subjectsoffered.FieldID,
			},
		},
	}
	if ps := sou.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sou.mutation.AMOUNT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subjectsoffered.FieldAMOUNT,
		})
	}
	if value, ok := sou.mutation.AddedAMOUNT(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subjectsoffered.FieldAMOUNT,
		})
	}
	if value, ok := sou.mutation.STATUS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: subjectsoffered.FieldSTATUS,
		})
	}
	if value, ok := sou.mutation.Remain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subjectsoffered.FieldRemain,
		})
	}
	if value, ok := sou.mutation.AddedRemain(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subjectsoffered.FieldRemain,
		})
	}
	if sou.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.SubjectTable,
			Columns: []string{subjectsoffered.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sou.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.SubjectTable,
			Columns: []string{subjectsoffered.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sou.mutation.DegreeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.DegreeTable,
			Columns: []string{subjectsoffered.DegreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sou.mutation.DegreeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.DegreeTable,
			Columns: []string{subjectsoffered.DegreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sou.mutation.YearCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.YearTable,
			Columns: []string{subjectsoffered.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: year.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sou.mutation.YearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.YearTable,
			Columns: []string{subjectsoffered.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: year.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if sou.mutation.TermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.TermTable,
			Columns: []string{subjectsoffered.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sou.mutation.TermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.TermTable,
			Columns: []string{subjectsoffered.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjectsoffered.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SubjectsOfferedUpdateOne is the builder for updating a single SubjectsOffered entity.
type SubjectsOfferedUpdateOne struct {
	config
	hooks    []Hook
	mutation *SubjectsOfferedMutation
}

// SetAMOUNT sets the AMOUNT field.
func (souo *SubjectsOfferedUpdateOne) SetAMOUNT(i int) *SubjectsOfferedUpdateOne {
	souo.mutation.ResetAMOUNT()
	souo.mutation.SetAMOUNT(i)
	return souo
}

// AddAMOUNT adds i to AMOUNT.
func (souo *SubjectsOfferedUpdateOne) AddAMOUNT(i int) *SubjectsOfferedUpdateOne {
	souo.mutation.AddAMOUNT(i)
	return souo
}

// SetSTATUS sets the STATUS field.
func (souo *SubjectsOfferedUpdateOne) SetSTATUS(b bool) *SubjectsOfferedUpdateOne {
	souo.mutation.SetSTATUS(b)
	return souo
}

// SetNillableSTATUS sets the STATUS field if the given value is not nil.
func (souo *SubjectsOfferedUpdateOne) SetNillableSTATUS(b *bool) *SubjectsOfferedUpdateOne {
	if b != nil {
		souo.SetSTATUS(*b)
	}
	return souo
}

// SetRemain sets the Remain field.
func (souo *SubjectsOfferedUpdateOne) SetRemain(i int) *SubjectsOfferedUpdateOne {
	souo.mutation.ResetRemain()
	souo.mutation.SetRemain(i)
	return souo
}

// AddRemain adds i to Remain.
func (souo *SubjectsOfferedUpdateOne) AddRemain(i int) *SubjectsOfferedUpdateOne {
	souo.mutation.AddRemain(i)
	return souo
}

// SetSubjectID sets the Subject edge to Subject by id.
func (souo *SubjectsOfferedUpdateOne) SetSubjectID(id int) *SubjectsOfferedUpdateOne {
	souo.mutation.SetSubjectID(id)
	return souo
}

// SetNillableSubjectID sets the Subject edge to Subject by id if the given value is not nil.
func (souo *SubjectsOfferedUpdateOne) SetNillableSubjectID(id *int) *SubjectsOfferedUpdateOne {
	if id != nil {
		souo = souo.SetSubjectID(*id)
	}
	return souo
}

// SetSubject sets the Subject edge to Subject.
func (souo *SubjectsOfferedUpdateOne) SetSubject(s *Subject) *SubjectsOfferedUpdateOne {
	return souo.SetSubjectID(s.ID)
}

// SetDegreeID sets the Degree edge to Degree by id.
func (souo *SubjectsOfferedUpdateOne) SetDegreeID(id int) *SubjectsOfferedUpdateOne {
	souo.mutation.SetDegreeID(id)
	return souo
}

// SetNillableDegreeID sets the Degree edge to Degree by id if the given value is not nil.
func (souo *SubjectsOfferedUpdateOne) SetNillableDegreeID(id *int) *SubjectsOfferedUpdateOne {
	if id != nil {
		souo = souo.SetDegreeID(*id)
	}
	return souo
}

// SetDegree sets the Degree edge to Degree.
func (souo *SubjectsOfferedUpdateOne) SetDegree(d *Degree) *SubjectsOfferedUpdateOne {
	return souo.SetDegreeID(d.ID)
}

// SetYearID sets the Year edge to Year by id.
func (souo *SubjectsOfferedUpdateOne) SetYearID(id int) *SubjectsOfferedUpdateOne {
	souo.mutation.SetYearID(id)
	return souo
}

// SetNillableYearID sets the Year edge to Year by id if the given value is not nil.
func (souo *SubjectsOfferedUpdateOne) SetNillableYearID(id *int) *SubjectsOfferedUpdateOne {
	if id != nil {
		souo = souo.SetYearID(*id)
	}
	return souo
}

// SetYear sets the Year edge to Year.
func (souo *SubjectsOfferedUpdateOne) SetYear(y *Year) *SubjectsOfferedUpdateOne {
	return souo.SetYearID(y.ID)
}

// SetTermID sets the Term edge to Term by id.
func (souo *SubjectsOfferedUpdateOne) SetTermID(id int) *SubjectsOfferedUpdateOne {
	souo.mutation.SetTermID(id)
	return souo
}

// SetNillableTermID sets the Term edge to Term by id if the given value is not nil.
func (souo *SubjectsOfferedUpdateOne) SetNillableTermID(id *int) *SubjectsOfferedUpdateOne {
	if id != nil {
		souo = souo.SetTermID(*id)
	}
	return souo
}

// SetTerm sets the Term edge to Term.
func (souo *SubjectsOfferedUpdateOne) SetTerm(t *Term) *SubjectsOfferedUpdateOne {
	return souo.SetTermID(t.ID)
}

// Mutation returns the SubjectsOfferedMutation object of the builder.
func (souo *SubjectsOfferedUpdateOne) Mutation() *SubjectsOfferedMutation {
	return souo.mutation
}

// ClearSubject clears the Subject edge to Subject.
func (souo *SubjectsOfferedUpdateOne) ClearSubject() *SubjectsOfferedUpdateOne {
	souo.mutation.ClearSubject()
	return souo
}

// ClearDegree clears the Degree edge to Degree.
func (souo *SubjectsOfferedUpdateOne) ClearDegree() *SubjectsOfferedUpdateOne {
	souo.mutation.ClearDegree()
	return souo
}

// ClearYear clears the Year edge to Year.
func (souo *SubjectsOfferedUpdateOne) ClearYear() *SubjectsOfferedUpdateOne {
	souo.mutation.ClearYear()
	return souo
}

// ClearTerm clears the Term edge to Term.
func (souo *SubjectsOfferedUpdateOne) ClearTerm() *SubjectsOfferedUpdateOne {
	souo.mutation.ClearTerm()
	return souo
}

// Save executes the query and returns the updated entity.
func (souo *SubjectsOfferedUpdateOne) Save(ctx context.Context) (*SubjectsOffered, error) {
	if v, ok := souo.mutation.AMOUNT(); ok {
		if err := subjectsoffered.AMOUNTValidator(v); err != nil {
			return nil, &ValidationError{Name: "AMOUNT", err: fmt.Errorf("ent: validator failed for field \"AMOUNT\": %w", err)}
		}
	}
	if v, ok := souo.mutation.Remain(); ok {
		if err := subjectsoffered.RemainValidator(v); err != nil {
			return nil, &ValidationError{Name: "Remain", err: fmt.Errorf("ent: validator failed for field \"Remain\": %w", err)}
		}
	}

	var (
		err  error
		node *SubjectsOffered
	)
	if len(souo.hooks) == 0 {
		node, err = souo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectsOfferedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			souo.mutation = mutation
			node, err = souo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(souo.hooks) - 1; i >= 0; i-- {
			mut = souo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, souo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (souo *SubjectsOfferedUpdateOne) SaveX(ctx context.Context) *SubjectsOffered {
	so, err := souo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return so
}

// Exec executes the query on the entity.
func (souo *SubjectsOfferedUpdateOne) Exec(ctx context.Context) error {
	_, err := souo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (souo *SubjectsOfferedUpdateOne) ExecX(ctx context.Context) {
	if err := souo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (souo *SubjectsOfferedUpdateOne) sqlSave(ctx context.Context) (so *SubjectsOffered, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subjectsoffered.Table,
			Columns: subjectsoffered.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subjectsoffered.FieldID,
			},
		},
	}
	id, ok := souo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SubjectsOffered.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := souo.mutation.AMOUNT(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subjectsoffered.FieldAMOUNT,
		})
	}
	if value, ok := souo.mutation.AddedAMOUNT(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subjectsoffered.FieldAMOUNT,
		})
	}
	if value, ok := souo.mutation.STATUS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: subjectsoffered.FieldSTATUS,
		})
	}
	if value, ok := souo.mutation.Remain(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subjectsoffered.FieldRemain,
		})
	}
	if value, ok := souo.mutation.AddedRemain(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subjectsoffered.FieldRemain,
		})
	}
	if souo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.SubjectTable,
			Columns: []string{subjectsoffered.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := souo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.SubjectTable,
			Columns: []string{subjectsoffered.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if souo.mutation.DegreeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.DegreeTable,
			Columns: []string{subjectsoffered.DegreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := souo.mutation.DegreeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.DegreeTable,
			Columns: []string{subjectsoffered.DegreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if souo.mutation.YearCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.YearTable,
			Columns: []string{subjectsoffered.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: year.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := souo.mutation.YearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.YearTable,
			Columns: []string{subjectsoffered.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: year.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if souo.mutation.TermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.TermTable,
			Columns: []string{subjectsoffered.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := souo.mutation.TermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.TermTable,
			Columns: []string{subjectsoffered.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	so = &SubjectsOffered{config: souo.config}
	_spec.Assign = so.assignValues
	_spec.ScanValues = so.scanValues()
	if err = sqlgraph.UpdateNode(ctx, souo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subjectsoffered.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return so, nil
}
