// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team19/app/ent/course"
	"github.com/team19/app/ent/courseclass"
	"github.com/team19/app/ent/predicate"
	"github.com/team19/app/ent/subject"
	"github.com/team19/app/ent/subjectsoffered"
)

// SubjectUpdate is the builder for updating Subject entities.
type SubjectUpdate struct {
	config
	hooks      []Hook
	mutation   *SubjectMutation
	predicates []predicate.Subject
}

// Where adds a new predicate for the builder.
func (su *SubjectUpdate) Where(ps ...predicate.Subject) *SubjectUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetSubjectName sets the Subject_name field.
func (su *SubjectUpdate) SetSubjectName(s string) *SubjectUpdate {
	su.mutation.SetSubjectName(s)
	return su
}

// AddSubjectIDs adds the subject edge to Course by ids.
func (su *SubjectUpdate) AddSubjectIDs(ids ...int) *SubjectUpdate {
	su.mutation.AddSubjectIDs(ids...)
	return su
}

// AddSubject adds the subject edges to Course.
func (su *SubjectUpdate) AddSubject(c ...*Course) *SubjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddSubjectIDs(ids...)
}

// AddSubjectsOfferedIDs adds the SubjectsOffered edge to SubjectsOffered by ids.
func (su *SubjectUpdate) AddSubjectsOfferedIDs(ids ...int) *SubjectUpdate {
	su.mutation.AddSubjectsOfferedIDs(ids...)
	return su
}

// AddSubjectsOffered adds the SubjectsOffered edges to SubjectsOffered.
func (su *SubjectUpdate) AddSubjectsOffered(s ...*SubjectsOffered) *SubjectUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSubjectsOfferedIDs(ids...)
}

// AddCourseclassIDs adds the courseclasses edge to Courseclass by ids.
func (su *SubjectUpdate) AddCourseclassIDs(ids ...int) *SubjectUpdate {
	su.mutation.AddCourseclassIDs(ids...)
	return su
}

// AddCourseclasses adds the courseclasses edges to Courseclass.
func (su *SubjectUpdate) AddCourseclasses(c ...*Courseclass) *SubjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCourseclassIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (su *SubjectUpdate) Mutation() *SubjectMutation {
	return su.mutation
}

// RemoveSubjectIDs removes the subject edge to Course by ids.
func (su *SubjectUpdate) RemoveSubjectIDs(ids ...int) *SubjectUpdate {
	su.mutation.RemoveSubjectIDs(ids...)
	return su
}

// RemoveSubject removes subject edges to Course.
func (su *SubjectUpdate) RemoveSubject(c ...*Course) *SubjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveSubjectIDs(ids...)
}

// RemoveSubjectsOfferedIDs removes the SubjectsOffered edge to SubjectsOffered by ids.
func (su *SubjectUpdate) RemoveSubjectsOfferedIDs(ids ...int) *SubjectUpdate {
	su.mutation.RemoveSubjectsOfferedIDs(ids...)
	return su
}

// RemoveSubjectsOffered removes SubjectsOffered edges to SubjectsOffered.
func (su *SubjectUpdate) RemoveSubjectsOffered(s ...*SubjectsOffered) *SubjectUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSubjectsOfferedIDs(ids...)
}

// RemoveCourseclassIDs removes the courseclasses edge to Courseclass by ids.
func (su *SubjectUpdate) RemoveCourseclassIDs(ids ...int) *SubjectUpdate {
	su.mutation.RemoveCourseclassIDs(ids...)
	return su
}

// RemoveCourseclasses removes courseclasses edges to Courseclass.
func (su *SubjectUpdate) RemoveCourseclasses(c ...*Courseclass) *SubjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCourseclassIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SubjectUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubjectUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubjectUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubjectUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SubjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subject.Table,
			Columns: subject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subject.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SubjectName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subject.FieldSubjectName,
		})
	}
	if nodes := su.mutation.RemovedSubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.SubjectTable,
			Columns: []string{subject.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.SubjectTable,
			Columns: []string{subject.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := su.mutation.RemovedSubjectsOfferedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.SubjectsOfferedTable,
			Columns: []string{subject.SubjectsOfferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subjectsoffered.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SubjectsOfferedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.SubjectsOfferedTable,
			Columns: []string{subject.SubjectsOfferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subjectsoffered.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := su.mutation.RemovedCourseclassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CourseclassesTable,
			Columns: []string{subject.CourseclassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CourseclassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CourseclassesTable,
			Columns: []string{subject.CourseclassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SubjectUpdateOne is the builder for updating a single Subject entity.
type SubjectUpdateOne struct {
	config
	hooks    []Hook
	mutation *SubjectMutation
}

// SetSubjectName sets the Subject_name field.
func (suo *SubjectUpdateOne) SetSubjectName(s string) *SubjectUpdateOne {
	suo.mutation.SetSubjectName(s)
	return suo
}

// AddSubjectIDs adds the subject edge to Course by ids.
func (suo *SubjectUpdateOne) AddSubjectIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.AddSubjectIDs(ids...)
	return suo
}

// AddSubject adds the subject edges to Course.
func (suo *SubjectUpdateOne) AddSubject(c ...*Course) *SubjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddSubjectIDs(ids...)
}

// AddSubjectsOfferedIDs adds the SubjectsOffered edge to SubjectsOffered by ids.
func (suo *SubjectUpdateOne) AddSubjectsOfferedIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.AddSubjectsOfferedIDs(ids...)
	return suo
}

// AddSubjectsOffered adds the SubjectsOffered edges to SubjectsOffered.
func (suo *SubjectUpdateOne) AddSubjectsOffered(s ...*SubjectsOffered) *SubjectUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSubjectsOfferedIDs(ids...)
}

// AddCourseclassIDs adds the courseclasses edge to Courseclass by ids.
func (suo *SubjectUpdateOne) AddCourseclassIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.AddCourseclassIDs(ids...)
	return suo
}

// AddCourseclasses adds the courseclasses edges to Courseclass.
func (suo *SubjectUpdateOne) AddCourseclasses(c ...*Courseclass) *SubjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCourseclassIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (suo *SubjectUpdateOne) Mutation() *SubjectMutation {
	return suo.mutation
}

// RemoveSubjectIDs removes the subject edge to Course by ids.
func (suo *SubjectUpdateOne) RemoveSubjectIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.RemoveSubjectIDs(ids...)
	return suo
}

// RemoveSubject removes subject edges to Course.
func (suo *SubjectUpdateOne) RemoveSubject(c ...*Course) *SubjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveSubjectIDs(ids...)
}

// RemoveSubjectsOfferedIDs removes the SubjectsOffered edge to SubjectsOffered by ids.
func (suo *SubjectUpdateOne) RemoveSubjectsOfferedIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.RemoveSubjectsOfferedIDs(ids...)
	return suo
}

// RemoveSubjectsOffered removes SubjectsOffered edges to SubjectsOffered.
func (suo *SubjectUpdateOne) RemoveSubjectsOffered(s ...*SubjectsOffered) *SubjectUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSubjectsOfferedIDs(ids...)
}

// RemoveCourseclassIDs removes the courseclasses edge to Courseclass by ids.
func (suo *SubjectUpdateOne) RemoveCourseclassIDs(ids ...int) *SubjectUpdateOne {
	suo.mutation.RemoveCourseclassIDs(ids...)
	return suo
}

// RemoveCourseclasses removes courseclasses edges to Courseclass.
func (suo *SubjectUpdateOne) RemoveCourseclasses(c ...*Courseclass) *SubjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCourseclassIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *SubjectUpdateOne) Save(ctx context.Context) (*Subject, error) {

	var (
		err  error
		node *Subject
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubjectUpdateOne) SaveX(ctx context.Context) *Subject {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *SubjectUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubjectUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SubjectUpdateOne) sqlSave(ctx context.Context) (s *Subject, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subject.Table,
			Columns: subject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subject.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Subject.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.SubjectName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subject.FieldSubjectName,
		})
	}
	if nodes := suo.mutation.RemovedSubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.SubjectTable,
			Columns: []string{subject.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.SubjectTable,
			Columns: []string{subject.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := suo.mutation.RemovedSubjectsOfferedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.SubjectsOfferedTable,
			Columns: []string{subject.SubjectsOfferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subjectsoffered.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SubjectsOfferedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.SubjectsOfferedTable,
			Columns: []string{subject.SubjectsOfferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subjectsoffered.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := suo.mutation.RemovedCourseclassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CourseclassesTable,
			Columns: []string{subject.CourseclassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CourseclassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CourseclassesTable,
			Columns: []string{subject.CourseclassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Subject{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
