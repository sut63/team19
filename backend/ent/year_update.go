// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team19/app/ent/predicate"
	"github.com/team19/app/ent/subjectsoffered"
	"github.com/team19/app/ent/year"
)

// YearUpdate is the builder for updating Year entities.
type YearUpdate struct {
	config
	hooks      []Hook
	mutation   *YearMutation
	predicates []predicate.Year
}

// Where adds a new predicate for the builder.
func (yu *YearUpdate) Where(ps ...predicate.Year) *YearUpdate {
	yu.predicates = append(yu.predicates, ps...)
	return yu
}

// SetYEAR sets the YEAR field.
func (yu *YearUpdate) SetYEAR(i int) *YearUpdate {
	yu.mutation.ResetYEAR()
	yu.mutation.SetYEAR(i)
	return yu
}

// AddYEAR adds i to YEAR.
func (yu *YearUpdate) AddYEAR(i int) *YearUpdate {
	yu.mutation.AddYEAR(i)
	return yu
}

// AddSubjectsOfferedIDs adds the SubjectsOffered edge to SubjectsOffered by ids.
func (yu *YearUpdate) AddSubjectsOfferedIDs(ids ...int) *YearUpdate {
	yu.mutation.AddSubjectsOfferedIDs(ids...)
	return yu
}

// AddSubjectsOffered adds the SubjectsOffered edges to SubjectsOffered.
func (yu *YearUpdate) AddSubjectsOffered(s ...*SubjectsOffered) *YearUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return yu.AddSubjectsOfferedIDs(ids...)
}

// Mutation returns the YearMutation object of the builder.
func (yu *YearUpdate) Mutation() *YearMutation {
	return yu.mutation
}

// RemoveSubjectsOfferedIDs removes the SubjectsOffered edge to SubjectsOffered by ids.
func (yu *YearUpdate) RemoveSubjectsOfferedIDs(ids ...int) *YearUpdate {
	yu.mutation.RemoveSubjectsOfferedIDs(ids...)
	return yu
}

// RemoveSubjectsOffered removes SubjectsOffered edges to SubjectsOffered.
func (yu *YearUpdate) RemoveSubjectsOffered(s ...*SubjectsOffered) *YearUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return yu.RemoveSubjectsOfferedIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (yu *YearUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(yu.hooks) == 0 {
		affected, err = yu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*YearMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			yu.mutation = mutation
			affected, err = yu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(yu.hooks) - 1; i >= 0; i-- {
			mut = yu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, yu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (yu *YearUpdate) SaveX(ctx context.Context) int {
	affected, err := yu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (yu *YearUpdate) Exec(ctx context.Context) error {
	_, err := yu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (yu *YearUpdate) ExecX(ctx context.Context) {
	if err := yu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (yu *YearUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   year.Table,
			Columns: year.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: year.FieldID,
			},
		},
	}
	if ps := yu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := yu.mutation.YEAR(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: year.FieldYEAR,
		})
	}
	if value, ok := yu.mutation.AddedYEAR(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: year.FieldYEAR,
		})
	}
	if nodes := yu.mutation.RemovedSubjectsOfferedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   year.SubjectsOfferedTable,
			Columns: []string{year.SubjectsOfferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subjectsoffered.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := yu.mutation.SubjectsOfferedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   year.SubjectsOfferedTable,
			Columns: []string{year.SubjectsOfferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subjectsoffered.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, yu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{year.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// YearUpdateOne is the builder for updating a single Year entity.
type YearUpdateOne struct {
	config
	hooks    []Hook
	mutation *YearMutation
}

// SetYEAR sets the YEAR field.
func (yuo *YearUpdateOne) SetYEAR(i int) *YearUpdateOne {
	yuo.mutation.ResetYEAR()
	yuo.mutation.SetYEAR(i)
	return yuo
}

// AddYEAR adds i to YEAR.
func (yuo *YearUpdateOne) AddYEAR(i int) *YearUpdateOne {
	yuo.mutation.AddYEAR(i)
	return yuo
}

// AddSubjectsOfferedIDs adds the SubjectsOffered edge to SubjectsOffered by ids.
func (yuo *YearUpdateOne) AddSubjectsOfferedIDs(ids ...int) *YearUpdateOne {
	yuo.mutation.AddSubjectsOfferedIDs(ids...)
	return yuo
}

// AddSubjectsOffered adds the SubjectsOffered edges to SubjectsOffered.
func (yuo *YearUpdateOne) AddSubjectsOffered(s ...*SubjectsOffered) *YearUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return yuo.AddSubjectsOfferedIDs(ids...)
}

// Mutation returns the YearMutation object of the builder.
func (yuo *YearUpdateOne) Mutation() *YearMutation {
	return yuo.mutation
}

// RemoveSubjectsOfferedIDs removes the SubjectsOffered edge to SubjectsOffered by ids.
func (yuo *YearUpdateOne) RemoveSubjectsOfferedIDs(ids ...int) *YearUpdateOne {
	yuo.mutation.RemoveSubjectsOfferedIDs(ids...)
	return yuo
}

// RemoveSubjectsOffered removes SubjectsOffered edges to SubjectsOffered.
func (yuo *YearUpdateOne) RemoveSubjectsOffered(s ...*SubjectsOffered) *YearUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return yuo.RemoveSubjectsOfferedIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (yuo *YearUpdateOne) Save(ctx context.Context) (*Year, error) {

	var (
		err  error
		node *Year
	)
	if len(yuo.hooks) == 0 {
		node, err = yuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*YearMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			yuo.mutation = mutation
			node, err = yuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(yuo.hooks) - 1; i >= 0; i-- {
			mut = yuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, yuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (yuo *YearUpdateOne) SaveX(ctx context.Context) *Year {
	y, err := yuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return y
}

// Exec executes the query on the entity.
func (yuo *YearUpdateOne) Exec(ctx context.Context) error {
	_, err := yuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (yuo *YearUpdateOne) ExecX(ctx context.Context) {
	if err := yuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (yuo *YearUpdateOne) sqlSave(ctx context.Context) (y *Year, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   year.Table,
			Columns: year.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: year.FieldID,
			},
		},
	}
	id, ok := yuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Year.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := yuo.mutation.YEAR(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: year.FieldYEAR,
		})
	}
	if value, ok := yuo.mutation.AddedYEAR(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: year.FieldYEAR,
		})
	}
	if nodes := yuo.mutation.RemovedSubjectsOfferedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   year.SubjectsOfferedTable,
			Columns: []string{year.SubjectsOfferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subjectsoffered.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := yuo.mutation.SubjectsOfferedIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   year.SubjectsOfferedTable,
			Columns: []string{year.SubjectsOfferedColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subjectsoffered.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	y = &Year{config: yuo.config}
	_spec.Assign = y.assignValues
	_spec.ScanValues = y.scanValues()
	if err = sqlgraph.UpdateNode(ctx, yuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{year.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return y, nil
}
