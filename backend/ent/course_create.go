// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team19/app/ent/course"
	"github.com/team19/app/ent/degree"
	"github.com/team19/app/ent/department"
	"github.com/team19/app/ent/subject"
)

// CourseCreate is the builder for creating a Course entity.
type CourseCreate struct {
	config
	mutation *CourseMutation
	hooks    []Hook
}

// SetCourseYear sets the Course_year field.
func (cc *CourseCreate) SetCourseYear(i int) *CourseCreate {
	cc.mutation.SetCourseYear(i)
	return cc
}

// SetCourseName sets the Course_name field.
func (cc *CourseCreate) SetCourseName(s string) *CourseCreate {
	cc.mutation.SetCourseName(s)
	return cc
}

// SetTeacherID sets the Teacher_id field.
func (cc *CourseCreate) SetTeacherID(s string) *CourseCreate {
	cc.mutation.SetTeacherID(s)
	return cc
}

// SetDepartmentIDID sets the Department_id edge to Department by id.
func (cc *CourseCreate) SetDepartmentIDID(id int) *CourseCreate {
	cc.mutation.SetDepartmentIDID(id)
	return cc
}

// SetNillableDepartmentIDID sets the Department_id edge to Department by id if the given value is not nil.
func (cc *CourseCreate) SetNillableDepartmentIDID(id *int) *CourseCreate {
	if id != nil {
		cc = cc.SetDepartmentIDID(*id)
	}
	return cc
}

// SetDepartmentID sets the Department_id edge to Department.
func (cc *CourseCreate) SetDepartmentID(d *Department) *CourseCreate {
	return cc.SetDepartmentIDID(d.ID)
}

// SetDegreeIDID sets the Degree_id edge to Degree by id.
func (cc *CourseCreate) SetDegreeIDID(id int) *CourseCreate {
	cc.mutation.SetDegreeIDID(id)
	return cc
}

// SetNillableDegreeIDID sets the Degree_id edge to Degree by id if the given value is not nil.
func (cc *CourseCreate) SetNillableDegreeIDID(id *int) *CourseCreate {
	if id != nil {
		cc = cc.SetDegreeIDID(*id)
	}
	return cc
}

// SetDegreeID sets the Degree_id edge to Degree.
func (cc *CourseCreate) SetDegreeID(d *Degree) *CourseCreate {
	return cc.SetDegreeIDID(d.ID)
}

// SetSubjectIDID sets the Subject_id edge to Subject by id.
func (cc *CourseCreate) SetSubjectIDID(id int) *CourseCreate {
	cc.mutation.SetSubjectIDID(id)
	return cc
}

// SetNillableSubjectIDID sets the Subject_id edge to Subject by id if the given value is not nil.
func (cc *CourseCreate) SetNillableSubjectIDID(id *int) *CourseCreate {
	if id != nil {
		cc = cc.SetSubjectIDID(*id)
	}
	return cc
}

// SetSubjectID sets the Subject_id edge to Subject.
func (cc *CourseCreate) SetSubjectID(s *Subject) *CourseCreate {
	return cc.SetSubjectIDID(s.ID)
}

// Mutation returns the CourseMutation object of the builder.
func (cc *CourseCreate) Mutation() *CourseMutation {
	return cc.mutation
}

// Save creates the Course in the database.
func (cc *CourseCreate) Save(ctx context.Context) (*Course, error) {
	if _, ok := cc.mutation.CourseYear(); !ok {
		return nil, &ValidationError{Name: "Course_year", err: errors.New("ent: missing required field \"Course_year\"")}
	}
	if v, ok := cc.mutation.CourseYear(); ok {
		if err := course.CourseYearValidator(v); err != nil {
			return nil, &ValidationError{Name: "Course_year", err: fmt.Errorf("ent: validator failed for field \"Course_year\": %w", err)}
		}
	}
	if _, ok := cc.mutation.CourseName(); !ok {
		return nil, &ValidationError{Name: "Course_name", err: errors.New("ent: missing required field \"Course_name\"")}
	}
	if v, ok := cc.mutation.CourseName(); ok {
		if err := course.CourseNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Course_name", err: fmt.Errorf("ent: validator failed for field \"Course_name\": %w", err)}
		}
	}
	if _, ok := cc.mutation.TeacherID(); !ok {
		return nil, &ValidationError{Name: "Teacher_id", err: errors.New("ent: missing required field \"Teacher_id\"")}
	}
	if v, ok := cc.mutation.TeacherID(); ok {
		if err := course.TeacherIDValidator(v); err != nil {
			return nil, &ValidationError{Name: "Teacher_id", err: fmt.Errorf("ent: validator failed for field \"Teacher_id\": %w", err)}
		}
	}
	var (
		err  error
		node *Course
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CourseCreate) SaveX(ctx context.Context) *Course {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CourseCreate) sqlSave(ctx context.Context) (*Course, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *CourseCreate) createSpec() (*Course, *sqlgraph.CreateSpec) {
	var (
		c     = &Course{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: course.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: course.FieldID,
			},
		}
	)
	if value, ok := cc.mutation.CourseYear(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: course.FieldCourseYear,
		})
		c.CourseYear = value
	}
	if value, ok := cc.mutation.CourseName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldCourseName,
		})
		c.CourseName = value
	}
	if value, ok := cc.mutation.TeacherID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldTeacherID,
		})
		c.TeacherID = value
	}
	if nodes := cc.mutation.DepartmentIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.DepartmentIDTable,
			Columns: []string{course.DepartmentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.DegreeIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.DegreeIDTable,
			Columns: []string{course.DegreeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SubjectIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.SubjectIDTable,
			Columns: []string{course.SubjectIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}
