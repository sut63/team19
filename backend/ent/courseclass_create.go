// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team19/app/ent/classdate"
	"github.com/team19/app/ent/classroom"
	"github.com/team19/app/ent/classtime"
	"github.com/team19/app/ent/courseclass"
	"github.com/team19/app/ent/instructorinfo"
	"github.com/team19/app/ent/subject"
)

// CourseclassCreate is the builder for creating a Courseclass entity.
type CourseclassCreate struct {
	config
	mutation *CourseclassMutation
	hooks    []Hook
}

// SetClasstimeID sets the classtime edge to Classtime by id.
func (cc *CourseclassCreate) SetClasstimeID(id int) *CourseclassCreate {
	cc.mutation.SetClasstimeID(id)
	return cc
}

// SetNillableClasstimeID sets the classtime edge to Classtime by id if the given value is not nil.
func (cc *CourseclassCreate) SetNillableClasstimeID(id *int) *CourseclassCreate {
	if id != nil {
		cc = cc.SetClasstimeID(*id)
	}
	return cc
}

// SetClasstime sets the classtime edge to Classtime.
func (cc *CourseclassCreate) SetClasstime(c *Classtime) *CourseclassCreate {
	return cc.SetClasstimeID(c.ID)
}

// SetClassdateID sets the classdate edge to Classdate by id.
func (cc *CourseclassCreate) SetClassdateID(id int) *CourseclassCreate {
	cc.mutation.SetClassdateID(id)
	return cc
}

// SetNillableClassdateID sets the classdate edge to Classdate by id if the given value is not nil.
func (cc *CourseclassCreate) SetNillableClassdateID(id *int) *CourseclassCreate {
	if id != nil {
		cc = cc.SetClassdateID(*id)
	}
	return cc
}

// SetClassdate sets the classdate edge to Classdate.
func (cc *CourseclassCreate) SetClassdate(c *Classdate) *CourseclassCreate {
	return cc.SetClassdateID(c.ID)
}

// SetClassroomID sets the classroom edge to Classroom by id.
func (cc *CourseclassCreate) SetClassroomID(id int) *CourseclassCreate {
	cc.mutation.SetClassroomID(id)
	return cc
}

// SetNillableClassroomID sets the classroom edge to Classroom by id if the given value is not nil.
func (cc *CourseclassCreate) SetNillableClassroomID(id *int) *CourseclassCreate {
	if id != nil {
		cc = cc.SetClassroomID(*id)
	}
	return cc
}

// SetClassroom sets the classroom edge to Classroom.
func (cc *CourseclassCreate) SetClassroom(c *Classroom) *CourseclassCreate {
	return cc.SetClassroomID(c.ID)
}

// SetInstructorInfoID sets the instructorInfo edge to InstructorInfo by id.
func (cc *CourseclassCreate) SetInstructorInfoID(id int) *CourseclassCreate {
	cc.mutation.SetInstructorInfoID(id)
	return cc
}

// SetNillableInstructorInfoID sets the instructorInfo edge to InstructorInfo by id if the given value is not nil.
func (cc *CourseclassCreate) SetNillableInstructorInfoID(id *int) *CourseclassCreate {
	if id != nil {
		cc = cc.SetInstructorInfoID(*id)
	}
	return cc
}

// SetInstructorInfo sets the instructorInfo edge to InstructorInfo.
func (cc *CourseclassCreate) SetInstructorInfo(i *InstructorInfo) *CourseclassCreate {
	return cc.SetInstructorInfoID(i.ID)
}

// SetSubjectID sets the subject edge to Subject by id.
func (cc *CourseclassCreate) SetSubjectID(id int) *CourseclassCreate {
	cc.mutation.SetSubjectID(id)
	return cc
}

// SetNillableSubjectID sets the subject edge to Subject by id if the given value is not nil.
func (cc *CourseclassCreate) SetNillableSubjectID(id *int) *CourseclassCreate {
	if id != nil {
		cc = cc.SetSubjectID(*id)
	}
	return cc
}

// SetSubject sets the subject edge to Subject.
func (cc *CourseclassCreate) SetSubject(s *Subject) *CourseclassCreate {
	return cc.SetSubjectID(s.ID)
}

// Mutation returns the CourseclassMutation object of the builder.
func (cc *CourseclassCreate) Mutation() *CourseclassMutation {
	return cc.mutation
}

// Save creates the Courseclass in the database.
func (cc *CourseclassCreate) Save(ctx context.Context) (*Courseclass, error) {
	var (
		err  error
		node *Courseclass
	)
	if len(cc.hooks) == 0 {
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseclassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cc.mutation = mutation
			node, err = cc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			mut = cc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CourseclassCreate) SaveX(ctx context.Context) *Courseclass {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (cc *CourseclassCreate) sqlSave(ctx context.Context) (*Courseclass, error) {
	c, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	c.ID = int(id)
	return c, nil
}

func (cc *CourseclassCreate) createSpec() (*Courseclass, *sqlgraph.CreateSpec) {
	var (
		c     = &Courseclass{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: courseclass.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: courseclass.FieldID,
			},
		}
	)
	if nodes := cc.mutation.ClasstimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClasstimeTable,
			Columns: []string{courseclass.ClasstimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classtime.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClassdateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClassdateTable,
			Columns: []string{courseclass.ClassdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classdate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ClassroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClassroomTable,
			Columns: []string{courseclass.ClassroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.InstructorInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.InstructorInfoTable,
			Columns: []string{courseclass.InstructorInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.SubjectTable,
			Columns: []string{courseclass.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return c, _spec
}
