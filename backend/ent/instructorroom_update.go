// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team19/app/ent/instructorinfo"
	"github.com/team19/app/ent/instructorroom"
	"github.com/team19/app/ent/predicate"
)

// InstructorRoomUpdate is the builder for updating InstructorRoom entities.
type InstructorRoomUpdate struct {
	config
	hooks      []Hook
	mutation   *InstructorRoomMutation
	predicates []predicate.InstructorRoom
}

// Where adds a new predicate for the builder.
func (iru *InstructorRoomUpdate) Where(ps ...predicate.InstructorRoom) *InstructorRoomUpdate {
	iru.predicates = append(iru.predicates, ps...)
	return iru
}

// SetROOM sets the ROOM field.
func (iru *InstructorRoomUpdate) SetROOM(s string) *InstructorRoomUpdate {
	iru.mutation.SetROOM(s)
	return iru
}

// SetBUILDING sets the BUILDING field.
func (iru *InstructorRoomUpdate) SetBUILDING(s string) *InstructorRoomUpdate {
	iru.mutation.SetBUILDING(s)
	return iru
}

// AddInstructorinfoIDs adds the instructorinfos edge to InstructorInfo by ids.
func (iru *InstructorRoomUpdate) AddInstructorinfoIDs(ids ...int) *InstructorRoomUpdate {
	iru.mutation.AddInstructorinfoIDs(ids...)
	return iru
}

// AddInstructorinfos adds the instructorinfos edges to InstructorInfo.
func (iru *InstructorRoomUpdate) AddInstructorinfos(i ...*InstructorInfo) *InstructorRoomUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iru.AddInstructorinfoIDs(ids...)
}

// Mutation returns the InstructorRoomMutation object of the builder.
func (iru *InstructorRoomUpdate) Mutation() *InstructorRoomMutation {
	return iru.mutation
}

// RemoveInstructorinfoIDs removes the instructorinfos edge to InstructorInfo by ids.
func (iru *InstructorRoomUpdate) RemoveInstructorinfoIDs(ids ...int) *InstructorRoomUpdate {
	iru.mutation.RemoveInstructorinfoIDs(ids...)
	return iru
}

// RemoveInstructorinfos removes instructorinfos edges to InstructorInfo.
func (iru *InstructorRoomUpdate) RemoveInstructorinfos(i ...*InstructorInfo) *InstructorRoomUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iru.RemoveInstructorinfoIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (iru *InstructorRoomUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(iru.hooks) == 0 {
		affected, err = iru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstructorRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iru.mutation = mutation
			affected, err = iru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iru.hooks) - 1; i >= 0; i-- {
			mut = iru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iru *InstructorRoomUpdate) SaveX(ctx context.Context) int {
	affected, err := iru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iru *InstructorRoomUpdate) Exec(ctx context.Context) error {
	_, err := iru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iru *InstructorRoomUpdate) ExecX(ctx context.Context) {
	if err := iru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iru *InstructorRoomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   instructorroom.Table,
			Columns: instructorroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: instructorroom.FieldID,
			},
		},
	}
	if ps := iru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iru.mutation.ROOM(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructorroom.FieldROOM,
		})
	}
	if value, ok := iru.mutation.BUILDING(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructorroom.FieldBUILDING,
		})
	}
	if nodes := iru.mutation.RemovedInstructorinfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instructorroom.InstructorinfosTable,
			Columns: []string{instructorroom.InstructorinfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iru.mutation.InstructorinfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instructorroom.InstructorinfosTable,
			Columns: []string{instructorroom.InstructorinfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instructorroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InstructorRoomUpdateOne is the builder for updating a single InstructorRoom entity.
type InstructorRoomUpdateOne struct {
	config
	hooks    []Hook
	mutation *InstructorRoomMutation
}

// SetROOM sets the ROOM field.
func (iruo *InstructorRoomUpdateOne) SetROOM(s string) *InstructorRoomUpdateOne {
	iruo.mutation.SetROOM(s)
	return iruo
}

// SetBUILDING sets the BUILDING field.
func (iruo *InstructorRoomUpdateOne) SetBUILDING(s string) *InstructorRoomUpdateOne {
	iruo.mutation.SetBUILDING(s)
	return iruo
}

// AddInstructorinfoIDs adds the instructorinfos edge to InstructorInfo by ids.
func (iruo *InstructorRoomUpdateOne) AddInstructorinfoIDs(ids ...int) *InstructorRoomUpdateOne {
	iruo.mutation.AddInstructorinfoIDs(ids...)
	return iruo
}

// AddInstructorinfos adds the instructorinfos edges to InstructorInfo.
func (iruo *InstructorRoomUpdateOne) AddInstructorinfos(i ...*InstructorInfo) *InstructorRoomUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iruo.AddInstructorinfoIDs(ids...)
}

// Mutation returns the InstructorRoomMutation object of the builder.
func (iruo *InstructorRoomUpdateOne) Mutation() *InstructorRoomMutation {
	return iruo.mutation
}

// RemoveInstructorinfoIDs removes the instructorinfos edge to InstructorInfo by ids.
func (iruo *InstructorRoomUpdateOne) RemoveInstructorinfoIDs(ids ...int) *InstructorRoomUpdateOne {
	iruo.mutation.RemoveInstructorinfoIDs(ids...)
	return iruo
}

// RemoveInstructorinfos removes instructorinfos edges to InstructorInfo.
func (iruo *InstructorRoomUpdateOne) RemoveInstructorinfos(i ...*InstructorInfo) *InstructorRoomUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return iruo.RemoveInstructorinfoIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (iruo *InstructorRoomUpdateOne) Save(ctx context.Context) (*InstructorRoom, error) {

	var (
		err  error
		node *InstructorRoom
	)
	if len(iruo.hooks) == 0 {
		node, err = iruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstructorRoomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iruo.mutation = mutation
			node, err = iruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iruo.hooks) - 1; i >= 0; i-- {
			mut = iruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iruo *InstructorRoomUpdateOne) SaveX(ctx context.Context) *InstructorRoom {
	ir, err := iruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ir
}

// Exec executes the query on the entity.
func (iruo *InstructorRoomUpdateOne) Exec(ctx context.Context) error {
	_, err := iruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iruo *InstructorRoomUpdateOne) ExecX(ctx context.Context) {
	if err := iruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iruo *InstructorRoomUpdateOne) sqlSave(ctx context.Context) (ir *InstructorRoom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   instructorroom.Table,
			Columns: instructorroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: instructorroom.FieldID,
			},
		},
	}
	id, ok := iruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing InstructorRoom.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := iruo.mutation.ROOM(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructorroom.FieldROOM,
		})
	}
	if value, ok := iruo.mutation.BUILDING(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructorroom.FieldBUILDING,
		})
	}
	if nodes := iruo.mutation.RemovedInstructorinfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instructorroom.InstructorinfosTable,
			Columns: []string{instructorroom.InstructorinfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iruo.mutation.InstructorinfosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instructorroom.InstructorinfosTable,
			Columns: []string{instructorroom.InstructorinfosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ir = &InstructorRoom{config: iruo.config}
	_spec.Assign = ir.assignValues
	_spec.ScanValues = ir.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instructorroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ir, nil
}
