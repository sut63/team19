// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team19/app/ent/classroom"
	"github.com/team19/app/ent/courseclass"
	"github.com/team19/app/ent/predicate"
)

// ClassroomUpdate is the builder for updating Classroom entities.
type ClassroomUpdate struct {
	config
	hooks      []Hook
	mutation   *ClassroomMutation
	predicates []predicate.Classroom
}

// Where adds a new predicate for the builder.
func (cu *ClassroomUpdate) Where(ps ...predicate.Classroom) *ClassroomUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetROOM sets the ROOM field.
func (cu *ClassroomUpdate) SetROOM(s string) *ClassroomUpdate {
	cu.mutation.SetROOM(s)
	return cu
}

// AddCourseclassIDs adds the courseclasses edge to Courseclass by ids.
func (cu *ClassroomUpdate) AddCourseclassIDs(ids ...int) *ClassroomUpdate {
	cu.mutation.AddCourseclassIDs(ids...)
	return cu
}

// AddCourseclasses adds the courseclasses edges to Courseclass.
func (cu *ClassroomUpdate) AddCourseclasses(c ...*Courseclass) *ClassroomUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddCourseclassIDs(ids...)
}

// Mutation returns the ClassroomMutation object of the builder.
func (cu *ClassroomUpdate) Mutation() *ClassroomMutation {
	return cu.mutation
}

// RemoveCourseclassIDs removes the courseclasses edge to Courseclass by ids.
func (cu *ClassroomUpdate) RemoveCourseclassIDs(ids ...int) *ClassroomUpdate {
	cu.mutation.RemoveCourseclassIDs(ids...)
	return cu
}

// RemoveCourseclasses removes courseclasses edges to Courseclass.
func (cu *ClassroomUpdate) RemoveCourseclasses(c ...*Courseclass) *ClassroomUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveCourseclassIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *ClassroomUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClassroomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ClassroomUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ClassroomUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ClassroomUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *ClassroomUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   classroom.Table,
			Columns: classroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: classroom.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.ROOM(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: classroom.FieldROOM,
		})
	}
	if nodes := cu.mutation.RemovedCourseclassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   classroom.CourseclassesTable,
			Columns: []string{classroom.CourseclassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourseclassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   classroom.CourseclassesTable,
			Columns: []string{classroom.CourseclassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ClassroomUpdateOne is the builder for updating a single Classroom entity.
type ClassroomUpdateOne struct {
	config
	hooks    []Hook
	mutation *ClassroomMutation
}

// SetROOM sets the ROOM field.
func (cuo *ClassroomUpdateOne) SetROOM(s string) *ClassroomUpdateOne {
	cuo.mutation.SetROOM(s)
	return cuo
}

// AddCourseclassIDs adds the courseclasses edge to Courseclass by ids.
func (cuo *ClassroomUpdateOne) AddCourseclassIDs(ids ...int) *ClassroomUpdateOne {
	cuo.mutation.AddCourseclassIDs(ids...)
	return cuo
}

// AddCourseclasses adds the courseclasses edges to Courseclass.
func (cuo *ClassroomUpdateOne) AddCourseclasses(c ...*Courseclass) *ClassroomUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddCourseclassIDs(ids...)
}

// Mutation returns the ClassroomMutation object of the builder.
func (cuo *ClassroomUpdateOne) Mutation() *ClassroomMutation {
	return cuo.mutation
}

// RemoveCourseclassIDs removes the courseclasses edge to Courseclass by ids.
func (cuo *ClassroomUpdateOne) RemoveCourseclassIDs(ids ...int) *ClassroomUpdateOne {
	cuo.mutation.RemoveCourseclassIDs(ids...)
	return cuo
}

// RemoveCourseclasses removes courseclasses edges to Courseclass.
func (cuo *ClassroomUpdateOne) RemoveCourseclasses(c ...*Courseclass) *ClassroomUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveCourseclassIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (cuo *ClassroomUpdateOne) Save(ctx context.Context) (*Classroom, error) {

	var (
		err  error
		node *Classroom
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ClassroomMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ClassroomUpdateOne) SaveX(ctx context.Context) *Classroom {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *ClassroomUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ClassroomUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *ClassroomUpdateOne) sqlSave(ctx context.Context) (c *Classroom, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   classroom.Table,
			Columns: classroom.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: classroom.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Classroom.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.ROOM(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: classroom.FieldROOM,
		})
	}
	if nodes := cuo.mutation.RemovedCourseclassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   classroom.CourseclassesTable,
			Columns: []string{classroom.CourseclassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourseclassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   classroom.CourseclassesTable,
			Columns: []string{classroom.CourseclassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Classroom{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{classroom.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
