// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team19/app/ent/degree"
	"github.com/team19/app/ent/predicate"
	"github.com/team19/app/ent/subject"
	"github.com/team19/app/ent/subjectsoffered"
	"github.com/team19/app/ent/term"
	"github.com/team19/app/ent/year"
)

// SubjectsOfferedQuery is the builder for querying SubjectsOffered entities.
type SubjectsOfferedQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	unique     []string
	predicates []predicate.SubjectsOffered
	// eager-loading edges.
	withSubject *SubjectQuery
	withDegree  *DegreeQuery
	withYear    *YearQuery
	withTerm    *TermQuery
	withFKs     bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the builder.
func (soq *SubjectsOfferedQuery) Where(ps ...predicate.SubjectsOffered) *SubjectsOfferedQuery {
	soq.predicates = append(soq.predicates, ps...)
	return soq
}

// Limit adds a limit step to the query.
func (soq *SubjectsOfferedQuery) Limit(limit int) *SubjectsOfferedQuery {
	soq.limit = &limit
	return soq
}

// Offset adds an offset step to the query.
func (soq *SubjectsOfferedQuery) Offset(offset int) *SubjectsOfferedQuery {
	soq.offset = &offset
	return soq
}

// Order adds an order step to the query.
func (soq *SubjectsOfferedQuery) Order(o ...OrderFunc) *SubjectsOfferedQuery {
	soq.order = append(soq.order, o...)
	return soq
}

// QuerySubject chains the current query on the Subject edge.
func (soq *SubjectsOfferedQuery) QuerySubject() *SubjectQuery {
	query := &SubjectQuery{config: soq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := soq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subjectsoffered.Table, subjectsoffered.FieldID, soq.sqlQuery()),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subjectsoffered.SubjectTable, subjectsoffered.SubjectColumn),
		)
		fromU = sqlgraph.SetNeighbors(soq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDegree chains the current query on the Degree edge.
func (soq *SubjectsOfferedQuery) QueryDegree() *DegreeQuery {
	query := &DegreeQuery{config: soq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := soq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subjectsoffered.Table, subjectsoffered.FieldID, soq.sqlQuery()),
			sqlgraph.To(degree.Table, degree.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subjectsoffered.DegreeTable, subjectsoffered.DegreeColumn),
		)
		fromU = sqlgraph.SetNeighbors(soq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryYear chains the current query on the Year edge.
func (soq *SubjectsOfferedQuery) QueryYear() *YearQuery {
	query := &YearQuery{config: soq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := soq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subjectsoffered.Table, subjectsoffered.FieldID, soq.sqlQuery()),
			sqlgraph.To(year.Table, year.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subjectsoffered.YearTable, subjectsoffered.YearColumn),
		)
		fromU = sqlgraph.SetNeighbors(soq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTerm chains the current query on the Term edge.
func (soq *SubjectsOfferedQuery) QueryTerm() *TermQuery {
	query := &TermQuery{config: soq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := soq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(subjectsoffered.Table, subjectsoffered.FieldID, soq.sqlQuery()),
			sqlgraph.To(term.Table, term.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subjectsoffered.TermTable, subjectsoffered.TermColumn),
		)
		fromU = sqlgraph.SetNeighbors(soq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first SubjectsOffered entity in the query. Returns *NotFoundError when no subjectsoffered was found.
func (soq *SubjectsOfferedQuery) First(ctx context.Context) (*SubjectsOffered, error) {
	sos, err := soq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(sos) == 0 {
		return nil, &NotFoundError{subjectsoffered.Label}
	}
	return sos[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (soq *SubjectsOfferedQuery) FirstX(ctx context.Context) *SubjectsOffered {
	so, err := soq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return so
}

// FirstID returns the first SubjectsOffered id in the query. Returns *NotFoundError when no id was found.
func (soq *SubjectsOfferedQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = soq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{subjectsoffered.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (soq *SubjectsOfferedQuery) FirstXID(ctx context.Context) int {
	id, err := soq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only SubjectsOffered entity in the query, returns an error if not exactly one entity was returned.
func (soq *SubjectsOfferedQuery) Only(ctx context.Context) (*SubjectsOffered, error) {
	sos, err := soq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(sos) {
	case 1:
		return sos[0], nil
	case 0:
		return nil, &NotFoundError{subjectsoffered.Label}
	default:
		return nil, &NotSingularError{subjectsoffered.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (soq *SubjectsOfferedQuery) OnlyX(ctx context.Context) *SubjectsOffered {
	so, err := soq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return so
}

// OnlyID returns the only SubjectsOffered id in the query, returns an error if not exactly one id was returned.
func (soq *SubjectsOfferedQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = soq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{subjectsoffered.Label}
	default:
		err = &NotSingularError{subjectsoffered.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (soq *SubjectsOfferedQuery) OnlyIDX(ctx context.Context) int {
	id, err := soq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of SubjectsOffereds.
func (soq *SubjectsOfferedQuery) All(ctx context.Context) ([]*SubjectsOffered, error) {
	if err := soq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return soq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (soq *SubjectsOfferedQuery) AllX(ctx context.Context) []*SubjectsOffered {
	sos, err := soq.All(ctx)
	if err != nil {
		panic(err)
	}
	return sos
}

// IDs executes the query and returns a list of SubjectsOffered ids.
func (soq *SubjectsOfferedQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := soq.Select(subjectsoffered.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (soq *SubjectsOfferedQuery) IDsX(ctx context.Context) []int {
	ids, err := soq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (soq *SubjectsOfferedQuery) Count(ctx context.Context) (int, error) {
	if err := soq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return soq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (soq *SubjectsOfferedQuery) CountX(ctx context.Context) int {
	count, err := soq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (soq *SubjectsOfferedQuery) Exist(ctx context.Context) (bool, error) {
	if err := soq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return soq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (soq *SubjectsOfferedQuery) ExistX(ctx context.Context) bool {
	exist, err := soq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (soq *SubjectsOfferedQuery) Clone() *SubjectsOfferedQuery {
	return &SubjectsOfferedQuery{
		config:     soq.config,
		limit:      soq.limit,
		offset:     soq.offset,
		order:      append([]OrderFunc{}, soq.order...),
		unique:     append([]string{}, soq.unique...),
		predicates: append([]predicate.SubjectsOffered{}, soq.predicates...),
		// clone intermediate query.
		sql:  soq.sql.Clone(),
		path: soq.path,
	}
}

//  WithSubject tells the query-builder to eager-loads the nodes that are connected to
// the "Subject" edge. The optional arguments used to configure the query builder of the edge.
func (soq *SubjectsOfferedQuery) WithSubject(opts ...func(*SubjectQuery)) *SubjectsOfferedQuery {
	query := &SubjectQuery{config: soq.config}
	for _, opt := range opts {
		opt(query)
	}
	soq.withSubject = query
	return soq
}

//  WithDegree tells the query-builder to eager-loads the nodes that are connected to
// the "Degree" edge. The optional arguments used to configure the query builder of the edge.
func (soq *SubjectsOfferedQuery) WithDegree(opts ...func(*DegreeQuery)) *SubjectsOfferedQuery {
	query := &DegreeQuery{config: soq.config}
	for _, opt := range opts {
		opt(query)
	}
	soq.withDegree = query
	return soq
}

//  WithYear tells the query-builder to eager-loads the nodes that are connected to
// the "Year" edge. The optional arguments used to configure the query builder of the edge.
func (soq *SubjectsOfferedQuery) WithYear(opts ...func(*YearQuery)) *SubjectsOfferedQuery {
	query := &YearQuery{config: soq.config}
	for _, opt := range opts {
		opt(query)
	}
	soq.withYear = query
	return soq
}

//  WithTerm tells the query-builder to eager-loads the nodes that are connected to
// the "Term" edge. The optional arguments used to configure the query builder of the edge.
func (soq *SubjectsOfferedQuery) WithTerm(opts ...func(*TermQuery)) *SubjectsOfferedQuery {
	query := &TermQuery{config: soq.config}
	for _, opt := range opts {
		opt(query)
	}
	soq.withTerm = query
	return soq
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AMOUNT int `json:"AMOUNT,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.SubjectsOffered.Query().
//		GroupBy(subjectsoffered.FieldAMOUNT).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (soq *SubjectsOfferedQuery) GroupBy(field string, fields ...string) *SubjectsOfferedGroupBy {
	group := &SubjectsOfferedGroupBy{config: soq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := soq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return soq.sqlQuery(), nil
	}
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		AMOUNT int `json:"AMOUNT,omitempty"`
//	}
//
//	client.SubjectsOffered.Query().
//		Select(subjectsoffered.FieldAMOUNT).
//		Scan(ctx, &v)
//
func (soq *SubjectsOfferedQuery) Select(field string, fields ...string) *SubjectsOfferedSelect {
	selector := &SubjectsOfferedSelect{config: soq.config}
	selector.fields = append([]string{field}, fields...)
	selector.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := soq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return soq.sqlQuery(), nil
	}
	return selector
}

func (soq *SubjectsOfferedQuery) prepareQuery(ctx context.Context) error {
	if soq.path != nil {
		prev, err := soq.path(ctx)
		if err != nil {
			return err
		}
		soq.sql = prev
	}
	return nil
}

func (soq *SubjectsOfferedQuery) sqlAll(ctx context.Context) ([]*SubjectsOffered, error) {
	var (
		nodes       = []*SubjectsOffered{}
		withFKs     = soq.withFKs
		_spec       = soq.querySpec()
		loadedTypes = [4]bool{
			soq.withSubject != nil,
			soq.withDegree != nil,
			soq.withYear != nil,
			soq.withTerm != nil,
		}
	)
	if soq.withSubject != nil || soq.withDegree != nil || soq.withYear != nil || soq.withTerm != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, subjectsoffered.ForeignKeys...)
	}
	_spec.ScanValues = func() []interface{} {
		node := &SubjectsOffered{config: soq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		if withFKs {
			values = append(values, node.fkValues()...)
		}
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, soq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := soq.withSubject; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*SubjectsOffered)
		for i := range nodes {
			if fk := nodes[i].Subject_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(subject.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "Subject_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Subject = n
			}
		}
	}

	if query := soq.withDegree; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*SubjectsOffered)
		for i := range nodes {
			if fk := nodes[i].Degree_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(degree.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "Degree_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Degree = n
			}
		}
	}

	if query := soq.withYear; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*SubjectsOffered)
		for i := range nodes {
			if fk := nodes[i].year_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(year.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "year_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Year = n
			}
		}
	}

	if query := soq.withTerm; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*SubjectsOffered)
		for i := range nodes {
			if fk := nodes[i].term_id; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(term.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "term_id" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Term = n
			}
		}
	}

	return nodes, nil
}

func (soq *SubjectsOfferedQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := soq.querySpec()
	return sqlgraph.CountNodes(ctx, soq.driver, _spec)
}

func (soq *SubjectsOfferedQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := soq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (soq *SubjectsOfferedQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subjectsoffered.Table,
			Columns: subjectsoffered.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subjectsoffered.FieldID,
			},
		},
		From:   soq.sql,
		Unique: true,
	}
	if ps := soq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := soq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := soq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := soq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (soq *SubjectsOfferedQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(soq.driver.Dialect())
	t1 := builder.Table(subjectsoffered.Table)
	selector := builder.Select(t1.Columns(subjectsoffered.Columns...)...).From(t1)
	if soq.sql != nil {
		selector = soq.sql
		selector.Select(selector.Columns(subjectsoffered.Columns...)...)
	}
	for _, p := range soq.predicates {
		p(selector)
	}
	for _, p := range soq.order {
		p(selector)
	}
	if offset := soq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := soq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// SubjectsOfferedGroupBy is the builder for group-by SubjectsOffered entities.
type SubjectsOfferedGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (sogb *SubjectsOfferedGroupBy) Aggregate(fns ...AggregateFunc) *SubjectsOfferedGroupBy {
	sogb.fns = append(sogb.fns, fns...)
	return sogb
}

// Scan applies the group-by query and scan the result into the given value.
func (sogb *SubjectsOfferedGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := sogb.path(ctx)
	if err != nil {
		return err
	}
	sogb.sql = query
	return sogb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sogb *SubjectsOfferedGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := sogb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (sogb *SubjectsOfferedGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(sogb.fields) > 1 {
		return nil, errors.New("ent: SubjectsOfferedGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := sogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sogb *SubjectsOfferedGroupBy) StringsX(ctx context.Context) []string {
	v, err := sogb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from group-by. It is only allowed when querying group-by with one field.
func (sogb *SubjectsOfferedGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sogb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{subjectsoffered.Label}
	default:
		err = fmt.Errorf("ent: SubjectsOfferedGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sogb *SubjectsOfferedGroupBy) StringX(ctx context.Context) string {
	v, err := sogb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (sogb *SubjectsOfferedGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(sogb.fields) > 1 {
		return nil, errors.New("ent: SubjectsOfferedGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := sogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sogb *SubjectsOfferedGroupBy) IntsX(ctx context.Context) []int {
	v, err := sogb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from group-by. It is only allowed when querying group-by with one field.
func (sogb *SubjectsOfferedGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sogb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{subjectsoffered.Label}
	default:
		err = fmt.Errorf("ent: SubjectsOfferedGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sogb *SubjectsOfferedGroupBy) IntX(ctx context.Context) int {
	v, err := sogb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (sogb *SubjectsOfferedGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(sogb.fields) > 1 {
		return nil, errors.New("ent: SubjectsOfferedGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := sogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sogb *SubjectsOfferedGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := sogb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from group-by. It is only allowed when querying group-by with one field.
func (sogb *SubjectsOfferedGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sogb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{subjectsoffered.Label}
	default:
		err = fmt.Errorf("ent: SubjectsOfferedGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sogb *SubjectsOfferedGroupBy) Float64X(ctx context.Context) float64 {
	v, err := sogb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (sogb *SubjectsOfferedGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(sogb.fields) > 1 {
		return nil, errors.New("ent: SubjectsOfferedGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := sogb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sogb *SubjectsOfferedGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := sogb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from group-by. It is only allowed when querying group-by with one field.
func (sogb *SubjectsOfferedGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sogb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{subjectsoffered.Label}
	default:
		err = fmt.Errorf("ent: SubjectsOfferedGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sogb *SubjectsOfferedGroupBy) BoolX(ctx context.Context) bool {
	v, err := sogb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sogb *SubjectsOfferedGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sogb.sqlQuery().Query()
	if err := sogb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sogb *SubjectsOfferedGroupBy) sqlQuery() *sql.Selector {
	selector := sogb.sql
	columns := make([]string, 0, len(sogb.fields)+len(sogb.fns))
	columns = append(columns, sogb.fields...)
	for _, fn := range sogb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(sogb.fields...)
}

// SubjectsOfferedSelect is the builder for select fields of SubjectsOffered entities.
type SubjectsOfferedSelect struct {
	config
	fields []string
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Scan applies the selector query and scan the result into the given value.
func (sos *SubjectsOfferedSelect) Scan(ctx context.Context, v interface{}) error {
	query, err := sos.path(ctx)
	if err != nil {
		return err
	}
	sos.sql = query
	return sos.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (sos *SubjectsOfferedSelect) ScanX(ctx context.Context, v interface{}) {
	if err := sos.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (sos *SubjectsOfferedSelect) Strings(ctx context.Context) ([]string, error) {
	if len(sos.fields) > 1 {
		return nil, errors.New("ent: SubjectsOfferedSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := sos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (sos *SubjectsOfferedSelect) StringsX(ctx context.Context) []string {
	v, err := sos.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from selector. It is only allowed when selecting one field.
func (sos *SubjectsOfferedSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = sos.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{subjectsoffered.Label}
	default:
		err = fmt.Errorf("ent: SubjectsOfferedSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (sos *SubjectsOfferedSelect) StringX(ctx context.Context) string {
	v, err := sos.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (sos *SubjectsOfferedSelect) Ints(ctx context.Context) ([]int, error) {
	if len(sos.fields) > 1 {
		return nil, errors.New("ent: SubjectsOfferedSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := sos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (sos *SubjectsOfferedSelect) IntsX(ctx context.Context) []int {
	v, err := sos.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from selector. It is only allowed when selecting one field.
func (sos *SubjectsOfferedSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = sos.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{subjectsoffered.Label}
	default:
		err = fmt.Errorf("ent: SubjectsOfferedSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (sos *SubjectsOfferedSelect) IntX(ctx context.Context) int {
	v, err := sos.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (sos *SubjectsOfferedSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(sos.fields) > 1 {
		return nil, errors.New("ent: SubjectsOfferedSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := sos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (sos *SubjectsOfferedSelect) Float64sX(ctx context.Context) []float64 {
	v, err := sos.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from selector. It is only allowed when selecting one field.
func (sos *SubjectsOfferedSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = sos.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{subjectsoffered.Label}
	default:
		err = fmt.Errorf("ent: SubjectsOfferedSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (sos *SubjectsOfferedSelect) Float64X(ctx context.Context) float64 {
	v, err := sos.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (sos *SubjectsOfferedSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(sos.fields) > 1 {
		return nil, errors.New("ent: SubjectsOfferedSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := sos.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (sos *SubjectsOfferedSelect) BoolsX(ctx context.Context) []bool {
	v, err := sos.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from selector. It is only allowed when selecting one field.
func (sos *SubjectsOfferedSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = sos.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{subjectsoffered.Label}
	default:
		err = fmt.Errorf("ent: SubjectsOfferedSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (sos *SubjectsOfferedSelect) BoolX(ctx context.Context) bool {
	v, err := sos.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sos *SubjectsOfferedSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := sos.sqlQuery().Query()
	if err := sos.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (sos *SubjectsOfferedSelect) sqlQuery() sql.Querier {
	selector := sos.sql
	selector.Select(selector.Columns(sos.fields...)...)
	return selector
}
