// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team19/app/ent/courseclass"
	"github.com/team19/app/ent/department"
	"github.com/team19/app/ent/instructorinfo"
	"github.com/team19/app/ent/instructorroom"
	"github.com/team19/app/ent/predicate"
	"github.com/team19/app/ent/title"
)

// InstructorInfoUpdate is the builder for updating InstructorInfo entities.
type InstructorInfoUpdate struct {
	config
	hooks      []Hook
	mutation   *InstructorInfoMutation
	predicates []predicate.InstructorInfo
}

// Where adds a new predicate for the builder.
func (iiu *InstructorInfoUpdate) Where(ps ...predicate.InstructorInfo) *InstructorInfoUpdate {
	iiu.predicates = append(iiu.predicates, ps...)
	return iiu
}

// SetNAME sets the NAME field.
func (iiu *InstructorInfoUpdate) SetNAME(s string) *InstructorInfoUpdate {
	iiu.mutation.SetNAME(s)
	return iiu
}

// SetPHONENUMBER sets the PHONENUMBER field.
func (iiu *InstructorInfoUpdate) SetPHONENUMBER(s string) *InstructorInfoUpdate {
	iiu.mutation.SetPHONENUMBER(s)
	return iiu
}

// SetEMAIL sets the EMAIL field.
func (iiu *InstructorInfoUpdate) SetEMAIL(s string) *InstructorInfoUpdate {
	iiu.mutation.SetEMAIL(s)
	return iiu
}

// SetPASSWORD sets the PASSWORD field.
func (iiu *InstructorInfoUpdate) SetPASSWORD(s string) *InstructorInfoUpdate {
	iiu.mutation.SetPASSWORD(s)
	return iiu
}

// SetTitleID sets the title edge to Title by id.
func (iiu *InstructorInfoUpdate) SetTitleID(id int) *InstructorInfoUpdate {
	iiu.mutation.SetTitleID(id)
	return iiu
}

// SetNillableTitleID sets the title edge to Title by id if the given value is not nil.
func (iiu *InstructorInfoUpdate) SetNillableTitleID(id *int) *InstructorInfoUpdate {
	if id != nil {
		iiu = iiu.SetTitleID(*id)
	}
	return iiu
}

// SetTitle sets the title edge to Title.
func (iiu *InstructorInfoUpdate) SetTitle(t *Title) *InstructorInfoUpdate {
	return iiu.SetTitleID(t.ID)
}

// SetInstructorroomID sets the instructorroom edge to InstructorRoom by id.
func (iiu *InstructorInfoUpdate) SetInstructorroomID(id int) *InstructorInfoUpdate {
	iiu.mutation.SetInstructorroomID(id)
	return iiu
}

// SetNillableInstructorroomID sets the instructorroom edge to InstructorRoom by id if the given value is not nil.
func (iiu *InstructorInfoUpdate) SetNillableInstructorroomID(id *int) *InstructorInfoUpdate {
	if id != nil {
		iiu = iiu.SetInstructorroomID(*id)
	}
	return iiu
}

// SetInstructorroom sets the instructorroom edge to InstructorRoom.
func (iiu *InstructorInfoUpdate) SetInstructorroom(i *InstructorRoom) *InstructorInfoUpdate {
	return iiu.SetInstructorroomID(i.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (iiu *InstructorInfoUpdate) SetDepartmentID(id int) *InstructorInfoUpdate {
	iiu.mutation.SetDepartmentID(id)
	return iiu
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (iiu *InstructorInfoUpdate) SetNillableDepartmentID(id *int) *InstructorInfoUpdate {
	if id != nil {
		iiu = iiu.SetDepartmentID(*id)
	}
	return iiu
}

// SetDepartment sets the department edge to Department.
func (iiu *InstructorInfoUpdate) SetDepartment(d *Department) *InstructorInfoUpdate {
	return iiu.SetDepartmentID(d.ID)
}

// AddCourseclassIDs adds the courseclasses edge to Courseclass by ids.
func (iiu *InstructorInfoUpdate) AddCourseclassIDs(ids ...int) *InstructorInfoUpdate {
	iiu.mutation.AddCourseclassIDs(ids...)
	return iiu
}

// AddCourseclasses adds the courseclasses edges to Courseclass.
func (iiu *InstructorInfoUpdate) AddCourseclasses(c ...*Courseclass) *InstructorInfoUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iiu.AddCourseclassIDs(ids...)
}

// Mutation returns the InstructorInfoMutation object of the builder.
func (iiu *InstructorInfoUpdate) Mutation() *InstructorInfoMutation {
	return iiu.mutation
}

// ClearTitle clears the title edge to Title.
func (iiu *InstructorInfoUpdate) ClearTitle() *InstructorInfoUpdate {
	iiu.mutation.ClearTitle()
	return iiu
}

// ClearInstructorroom clears the instructorroom edge to InstructorRoom.
func (iiu *InstructorInfoUpdate) ClearInstructorroom() *InstructorInfoUpdate {
	iiu.mutation.ClearInstructorroom()
	return iiu
}

// ClearDepartment clears the department edge to Department.
func (iiu *InstructorInfoUpdate) ClearDepartment() *InstructorInfoUpdate {
	iiu.mutation.ClearDepartment()
	return iiu
}

// RemoveCourseclassIDs removes the courseclasses edge to Courseclass by ids.
func (iiu *InstructorInfoUpdate) RemoveCourseclassIDs(ids ...int) *InstructorInfoUpdate {
	iiu.mutation.RemoveCourseclassIDs(ids...)
	return iiu
}

// RemoveCourseclasses removes courseclasses edges to Courseclass.
func (iiu *InstructorInfoUpdate) RemoveCourseclasses(c ...*Courseclass) *InstructorInfoUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iiu.RemoveCourseclassIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (iiu *InstructorInfoUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := iiu.mutation.NAME(); ok {
		if err := instructorinfo.NAMEValidator(v); err != nil {
			return 0, &ValidationError{Name: "NAME", err: fmt.Errorf("ent: validator failed for field \"NAME\": %w", err)}
		}
	}
	if v, ok := iiu.mutation.PHONENUMBER(); ok {
		if err := instructorinfo.PHONENUMBERValidator(v); err != nil {
			return 0, &ValidationError{Name: "PHONENUMBER", err: fmt.Errorf("ent: validator failed for field \"PHONENUMBER\": %w", err)}
		}
	}
	if v, ok := iiu.mutation.EMAIL(); ok {
		if err := instructorinfo.EMAILValidator(v); err != nil {
			return 0, &ValidationError{Name: "EMAIL", err: fmt.Errorf("ent: validator failed for field \"EMAIL\": %w", err)}
		}
	}
	if v, ok := iiu.mutation.PASSWORD(); ok {
		if err := instructorinfo.PASSWORDValidator(v); err != nil {
			return 0, &ValidationError{Name: "PASSWORD", err: fmt.Errorf("ent: validator failed for field \"PASSWORD\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(iiu.hooks) == 0 {
		affected, err = iiu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstructorInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iiu.mutation = mutation
			affected, err = iiu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iiu.hooks) - 1; i >= 0; i-- {
			mut = iiu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iiu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iiu *InstructorInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := iiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iiu *InstructorInfoUpdate) Exec(ctx context.Context) error {
	_, err := iiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiu *InstructorInfoUpdate) ExecX(ctx context.Context) {
	if err := iiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iiu *InstructorInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   instructorinfo.Table,
			Columns: instructorinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: instructorinfo.FieldID,
			},
		},
	}
	if ps := iiu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iiu.mutation.NAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructorinfo.FieldNAME,
		})
	}
	if value, ok := iiu.mutation.PHONENUMBER(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructorinfo.FieldPHONENUMBER,
		})
	}
	if value, ok := iiu.mutation.EMAIL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructorinfo.FieldEMAIL,
		})
	}
	if value, ok := iiu.mutation.PASSWORD(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructorinfo.FieldPASSWORD,
		})
	}
	if iiu.mutation.TitleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instructorinfo.TitleTable,
			Columns: []string{instructorinfo.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.TitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instructorinfo.TitleTable,
			Columns: []string{instructorinfo.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiu.mutation.InstructorroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instructorinfo.InstructorroomTable,
			Columns: []string{instructorinfo.InstructorroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.InstructorroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instructorinfo.InstructorroomTable,
			Columns: []string{instructorinfo.InstructorroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiu.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instructorinfo.DepartmentTable,
			Columns: []string{instructorinfo.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instructorinfo.DepartmentTable,
			Columns: []string{instructorinfo.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := iiu.mutation.RemovedCourseclassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instructorinfo.CourseclassesTable,
			Columns: []string{instructorinfo.CourseclassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiu.mutation.CourseclassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instructorinfo.CourseclassesTable,
			Columns: []string{instructorinfo.CourseclassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instructorinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// InstructorInfoUpdateOne is the builder for updating a single InstructorInfo entity.
type InstructorInfoUpdateOne struct {
	config
	hooks    []Hook
	mutation *InstructorInfoMutation
}

// SetNAME sets the NAME field.
func (iiuo *InstructorInfoUpdateOne) SetNAME(s string) *InstructorInfoUpdateOne {
	iiuo.mutation.SetNAME(s)
	return iiuo
}

// SetPHONENUMBER sets the PHONENUMBER field.
func (iiuo *InstructorInfoUpdateOne) SetPHONENUMBER(s string) *InstructorInfoUpdateOne {
	iiuo.mutation.SetPHONENUMBER(s)
	return iiuo
}

// SetEMAIL sets the EMAIL field.
func (iiuo *InstructorInfoUpdateOne) SetEMAIL(s string) *InstructorInfoUpdateOne {
	iiuo.mutation.SetEMAIL(s)
	return iiuo
}

// SetPASSWORD sets the PASSWORD field.
func (iiuo *InstructorInfoUpdateOne) SetPASSWORD(s string) *InstructorInfoUpdateOne {
	iiuo.mutation.SetPASSWORD(s)
	return iiuo
}

// SetTitleID sets the title edge to Title by id.
func (iiuo *InstructorInfoUpdateOne) SetTitleID(id int) *InstructorInfoUpdateOne {
	iiuo.mutation.SetTitleID(id)
	return iiuo
}

// SetNillableTitleID sets the title edge to Title by id if the given value is not nil.
func (iiuo *InstructorInfoUpdateOne) SetNillableTitleID(id *int) *InstructorInfoUpdateOne {
	if id != nil {
		iiuo = iiuo.SetTitleID(*id)
	}
	return iiuo
}

// SetTitle sets the title edge to Title.
func (iiuo *InstructorInfoUpdateOne) SetTitle(t *Title) *InstructorInfoUpdateOne {
	return iiuo.SetTitleID(t.ID)
}

// SetInstructorroomID sets the instructorroom edge to InstructorRoom by id.
func (iiuo *InstructorInfoUpdateOne) SetInstructorroomID(id int) *InstructorInfoUpdateOne {
	iiuo.mutation.SetInstructorroomID(id)
	return iiuo
}

// SetNillableInstructorroomID sets the instructorroom edge to InstructorRoom by id if the given value is not nil.
func (iiuo *InstructorInfoUpdateOne) SetNillableInstructorroomID(id *int) *InstructorInfoUpdateOne {
	if id != nil {
		iiuo = iiuo.SetInstructorroomID(*id)
	}
	return iiuo
}

// SetInstructorroom sets the instructorroom edge to InstructorRoom.
func (iiuo *InstructorInfoUpdateOne) SetInstructorroom(i *InstructorRoom) *InstructorInfoUpdateOne {
	return iiuo.SetInstructorroomID(i.ID)
}

// SetDepartmentID sets the department edge to Department by id.
func (iiuo *InstructorInfoUpdateOne) SetDepartmentID(id int) *InstructorInfoUpdateOne {
	iiuo.mutation.SetDepartmentID(id)
	return iiuo
}

// SetNillableDepartmentID sets the department edge to Department by id if the given value is not nil.
func (iiuo *InstructorInfoUpdateOne) SetNillableDepartmentID(id *int) *InstructorInfoUpdateOne {
	if id != nil {
		iiuo = iiuo.SetDepartmentID(*id)
	}
	return iiuo
}

// SetDepartment sets the department edge to Department.
func (iiuo *InstructorInfoUpdateOne) SetDepartment(d *Department) *InstructorInfoUpdateOne {
	return iiuo.SetDepartmentID(d.ID)
}

// AddCourseclassIDs adds the courseclasses edge to Courseclass by ids.
func (iiuo *InstructorInfoUpdateOne) AddCourseclassIDs(ids ...int) *InstructorInfoUpdateOne {
	iiuo.mutation.AddCourseclassIDs(ids...)
	return iiuo
}

// AddCourseclasses adds the courseclasses edges to Courseclass.
func (iiuo *InstructorInfoUpdateOne) AddCourseclasses(c ...*Courseclass) *InstructorInfoUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iiuo.AddCourseclassIDs(ids...)
}

// Mutation returns the InstructorInfoMutation object of the builder.
func (iiuo *InstructorInfoUpdateOne) Mutation() *InstructorInfoMutation {
	return iiuo.mutation
}

// ClearTitle clears the title edge to Title.
func (iiuo *InstructorInfoUpdateOne) ClearTitle() *InstructorInfoUpdateOne {
	iiuo.mutation.ClearTitle()
	return iiuo
}

// ClearInstructorroom clears the instructorroom edge to InstructorRoom.
func (iiuo *InstructorInfoUpdateOne) ClearInstructorroom() *InstructorInfoUpdateOne {
	iiuo.mutation.ClearInstructorroom()
	return iiuo
}

// ClearDepartment clears the department edge to Department.
func (iiuo *InstructorInfoUpdateOne) ClearDepartment() *InstructorInfoUpdateOne {
	iiuo.mutation.ClearDepartment()
	return iiuo
}

// RemoveCourseclassIDs removes the courseclasses edge to Courseclass by ids.
func (iiuo *InstructorInfoUpdateOne) RemoveCourseclassIDs(ids ...int) *InstructorInfoUpdateOne {
	iiuo.mutation.RemoveCourseclassIDs(ids...)
	return iiuo
}

// RemoveCourseclasses removes courseclasses edges to Courseclass.
func (iiuo *InstructorInfoUpdateOne) RemoveCourseclasses(c ...*Courseclass) *InstructorInfoUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return iiuo.RemoveCourseclassIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (iiuo *InstructorInfoUpdateOne) Save(ctx context.Context) (*InstructorInfo, error) {
	if v, ok := iiuo.mutation.NAME(); ok {
		if err := instructorinfo.NAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "NAME", err: fmt.Errorf("ent: validator failed for field \"NAME\": %w", err)}
		}
	}
	if v, ok := iiuo.mutation.PHONENUMBER(); ok {
		if err := instructorinfo.PHONENUMBERValidator(v); err != nil {
			return nil, &ValidationError{Name: "PHONENUMBER", err: fmt.Errorf("ent: validator failed for field \"PHONENUMBER\": %w", err)}
		}
	}
	if v, ok := iiuo.mutation.EMAIL(); ok {
		if err := instructorinfo.EMAILValidator(v); err != nil {
			return nil, &ValidationError{Name: "EMAIL", err: fmt.Errorf("ent: validator failed for field \"EMAIL\": %w", err)}
		}
	}
	if v, ok := iiuo.mutation.PASSWORD(); ok {
		if err := instructorinfo.PASSWORDValidator(v); err != nil {
			return nil, &ValidationError{Name: "PASSWORD", err: fmt.Errorf("ent: validator failed for field \"PASSWORD\": %w", err)}
		}
	}

	var (
		err  error
		node *InstructorInfo
	)
	if len(iiuo.hooks) == 0 {
		node, err = iiuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstructorInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iiuo.mutation = mutation
			node, err = iiuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iiuo.hooks) - 1; i >= 0; i-- {
			mut = iiuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iiuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iiuo *InstructorInfoUpdateOne) SaveX(ctx context.Context) *InstructorInfo {
	ii, err := iiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return ii
}

// Exec executes the query on the entity.
func (iiuo *InstructorInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := iiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iiuo *InstructorInfoUpdateOne) ExecX(ctx context.Context) {
	if err := iiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iiuo *InstructorInfoUpdateOne) sqlSave(ctx context.Context) (ii *InstructorInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   instructorinfo.Table,
			Columns: instructorinfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: instructorinfo.FieldID,
			},
		},
	}
	id, ok := iiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing InstructorInfo.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := iiuo.mutation.NAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructorinfo.FieldNAME,
		})
	}
	if value, ok := iiuo.mutation.PHONENUMBER(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructorinfo.FieldPHONENUMBER,
		})
	}
	if value, ok := iiuo.mutation.EMAIL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructorinfo.FieldEMAIL,
		})
	}
	if value, ok := iiuo.mutation.PASSWORD(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: instructorinfo.FieldPASSWORD,
		})
	}
	if iiuo.mutation.TitleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instructorinfo.TitleTable,
			Columns: []string{instructorinfo.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.TitleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instructorinfo.TitleTable,
			Columns: []string{instructorinfo.TitleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: title.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiuo.mutation.InstructorroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instructorinfo.InstructorroomTable,
			Columns: []string{instructorinfo.InstructorroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.InstructorroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instructorinfo.InstructorroomTable,
			Columns: []string{instructorinfo.InstructorroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if iiuo.mutation.DepartmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instructorinfo.DepartmentTable,
			Columns: []string{instructorinfo.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   instructorinfo.DepartmentTable,
			Columns: []string{instructorinfo.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: department.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := iiuo.mutation.RemovedCourseclassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instructorinfo.CourseclassesTable,
			Columns: []string{instructorinfo.CourseclassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iiuo.mutation.CourseclassesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   instructorinfo.CourseclassesTable,
			Columns: []string{instructorinfo.CourseclassesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: courseclass.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	ii = &InstructorInfo{config: iiuo.config}
	_spec.Assign = ii.assignValues
	_spec.ScanValues = ii.scanValues()
	if err = sqlgraph.UpdateNode(ctx, iiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{instructorinfo.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return ii, nil
}
