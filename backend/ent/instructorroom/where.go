// Code generated by entc, DO NOT EDIT.

package instructorroom

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team19/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ROOM applies equality check predicate on the "ROOM" field. It's identical to ROOMEQ.
func ROOM(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldROOM), v))
	})
}

// BUILDING applies equality check predicate on the "BUILDING" field. It's identical to BUILDINGEQ.
func BUILDING(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBUILDING), v))
	})
}

// ROOMEQ applies the EQ predicate on the "ROOM" field.
func ROOMEQ(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldROOM), v))
	})
}

// ROOMNEQ applies the NEQ predicate on the "ROOM" field.
func ROOMNEQ(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldROOM), v))
	})
}

// ROOMIn applies the In predicate on the "ROOM" field.
func ROOMIn(vs ...string) predicate.InstructorRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InstructorRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldROOM), v...))
	})
}

// ROOMNotIn applies the NotIn predicate on the "ROOM" field.
func ROOMNotIn(vs ...string) predicate.InstructorRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InstructorRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldROOM), v...))
	})
}

// ROOMGT applies the GT predicate on the "ROOM" field.
func ROOMGT(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldROOM), v))
	})
}

// ROOMGTE applies the GTE predicate on the "ROOM" field.
func ROOMGTE(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldROOM), v))
	})
}

// ROOMLT applies the LT predicate on the "ROOM" field.
func ROOMLT(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldROOM), v))
	})
}

// ROOMLTE applies the LTE predicate on the "ROOM" field.
func ROOMLTE(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldROOM), v))
	})
}

// ROOMContains applies the Contains predicate on the "ROOM" field.
func ROOMContains(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldROOM), v))
	})
}

// ROOMHasPrefix applies the HasPrefix predicate on the "ROOM" field.
func ROOMHasPrefix(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldROOM), v))
	})
}

// ROOMHasSuffix applies the HasSuffix predicate on the "ROOM" field.
func ROOMHasSuffix(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldROOM), v))
	})
}

// ROOMEqualFold applies the EqualFold predicate on the "ROOM" field.
func ROOMEqualFold(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldROOM), v))
	})
}

// ROOMContainsFold applies the ContainsFold predicate on the "ROOM" field.
func ROOMContainsFold(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldROOM), v))
	})
}

// BUILDINGEQ applies the EQ predicate on the "BUILDING" field.
func BUILDINGEQ(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBUILDING), v))
	})
}

// BUILDINGNEQ applies the NEQ predicate on the "BUILDING" field.
func BUILDINGNEQ(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBUILDING), v))
	})
}

// BUILDINGIn applies the In predicate on the "BUILDING" field.
func BUILDINGIn(vs ...string) predicate.InstructorRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InstructorRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBUILDING), v...))
	})
}

// BUILDINGNotIn applies the NotIn predicate on the "BUILDING" field.
func BUILDINGNotIn(vs ...string) predicate.InstructorRoom {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.InstructorRoom(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBUILDING), v...))
	})
}

// BUILDINGGT applies the GT predicate on the "BUILDING" field.
func BUILDINGGT(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBUILDING), v))
	})
}

// BUILDINGGTE applies the GTE predicate on the "BUILDING" field.
func BUILDINGGTE(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBUILDING), v))
	})
}

// BUILDINGLT applies the LT predicate on the "BUILDING" field.
func BUILDINGLT(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBUILDING), v))
	})
}

// BUILDINGLTE applies the LTE predicate on the "BUILDING" field.
func BUILDINGLTE(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBUILDING), v))
	})
}

// BUILDINGContains applies the Contains predicate on the "BUILDING" field.
func BUILDINGContains(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBUILDING), v))
	})
}

// BUILDINGHasPrefix applies the HasPrefix predicate on the "BUILDING" field.
func BUILDINGHasPrefix(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBUILDING), v))
	})
}

// BUILDINGHasSuffix applies the HasSuffix predicate on the "BUILDING" field.
func BUILDINGHasSuffix(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBUILDING), v))
	})
}

// BUILDINGEqualFold applies the EqualFold predicate on the "BUILDING" field.
func BUILDINGEqualFold(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBUILDING), v))
	})
}

// BUILDINGContainsFold applies the ContainsFold predicate on the "BUILDING" field.
func BUILDINGContainsFold(v string) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBUILDING), v))
	})
}

// HasInstructorinfos applies the HasEdge predicate on the "instructorinfos" edge.
func HasInstructorinfos() predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstructorinfosTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InstructorinfosTable, InstructorinfosColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasInstructorinfosWith applies the HasEdge predicate on the "instructorinfos" edge with a given conditions (other predicates).
func HasInstructorinfosWith(preds ...predicate.InstructorInfo) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(InstructorinfosInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, InstructorinfosTable, InstructorinfosColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.InstructorRoom) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.InstructorRoom) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.InstructorRoom) predicate.InstructorRoom {
	return predicate.InstructorRoom(func(s *sql.Selector) {
		p(s.Not())
	})
}
