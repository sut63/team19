// Code generated by entc, DO NOT EDIT.

package subjectsoffered

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/team19/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AMOUNT applies equality check predicate on the "AMOUNT" field. It's identical to AMOUNTEQ.
func AMOUNT(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAMOUNT), v))
	})
}

// STATUS applies equality check predicate on the "STATUS" field. It's identical to STATUSEQ.
func STATUS(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSTATUS), v))
	})
}

// Remain applies equality check predicate on the "Remain" field. It's identical to RemainEQ.
func Remain(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemain), v))
	})
}

// AMOUNTEQ applies the EQ predicate on the "AMOUNT" field.
func AMOUNTEQ(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAMOUNT), v))
	})
}

// AMOUNTNEQ applies the NEQ predicate on the "AMOUNT" field.
func AMOUNTNEQ(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAMOUNT), v))
	})
}

// AMOUNTIn applies the In predicate on the "AMOUNT" field.
func AMOUNTIn(vs ...string) predicate.SubjectsOffered {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAMOUNT), v...))
	})
}

// AMOUNTNotIn applies the NotIn predicate on the "AMOUNT" field.
func AMOUNTNotIn(vs ...string) predicate.SubjectsOffered {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAMOUNT), v...))
	})
}

// AMOUNTGT applies the GT predicate on the "AMOUNT" field.
func AMOUNTGT(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAMOUNT), v))
	})
}

// AMOUNTGTE applies the GTE predicate on the "AMOUNT" field.
func AMOUNTGTE(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAMOUNT), v))
	})
}

// AMOUNTLT applies the LT predicate on the "AMOUNT" field.
func AMOUNTLT(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAMOUNT), v))
	})
}

// AMOUNTLTE applies the LTE predicate on the "AMOUNT" field.
func AMOUNTLTE(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAMOUNT), v))
	})
}

// AMOUNTContains applies the Contains predicate on the "AMOUNT" field.
func AMOUNTContains(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAMOUNT), v))
	})
}

// AMOUNTHasPrefix applies the HasPrefix predicate on the "AMOUNT" field.
func AMOUNTHasPrefix(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAMOUNT), v))
	})
}

// AMOUNTHasSuffix applies the HasSuffix predicate on the "AMOUNT" field.
func AMOUNTHasSuffix(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAMOUNT), v))
	})
}

// AMOUNTEqualFold applies the EqualFold predicate on the "AMOUNT" field.
func AMOUNTEqualFold(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAMOUNT), v))
	})
}

// AMOUNTContainsFold applies the ContainsFold predicate on the "AMOUNT" field.
func AMOUNTContainsFold(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAMOUNT), v))
	})
}

// STATUSEQ applies the EQ predicate on the "STATUS" field.
func STATUSEQ(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSTATUS), v))
	})
}

// STATUSNEQ applies the NEQ predicate on the "STATUS" field.
func STATUSNEQ(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSTATUS), v))
	})
}

// STATUSIn applies the In predicate on the "STATUS" field.
func STATUSIn(vs ...string) predicate.SubjectsOffered {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSTATUS), v...))
	})
}

// STATUSNotIn applies the NotIn predicate on the "STATUS" field.
func STATUSNotIn(vs ...string) predicate.SubjectsOffered {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSTATUS), v...))
	})
}

// STATUSGT applies the GT predicate on the "STATUS" field.
func STATUSGT(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSTATUS), v))
	})
}

// STATUSGTE applies the GTE predicate on the "STATUS" field.
func STATUSGTE(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSTATUS), v))
	})
}

// STATUSLT applies the LT predicate on the "STATUS" field.
func STATUSLT(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSTATUS), v))
	})
}

// STATUSLTE applies the LTE predicate on the "STATUS" field.
func STATUSLTE(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSTATUS), v))
	})
}

// STATUSContains applies the Contains predicate on the "STATUS" field.
func STATUSContains(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSTATUS), v))
	})
}

// STATUSHasPrefix applies the HasPrefix predicate on the "STATUS" field.
func STATUSHasPrefix(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSTATUS), v))
	})
}

// STATUSHasSuffix applies the HasSuffix predicate on the "STATUS" field.
func STATUSHasSuffix(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSTATUS), v))
	})
}

// STATUSEqualFold applies the EqualFold predicate on the "STATUS" field.
func STATUSEqualFold(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSTATUS), v))
	})
}

// STATUSContainsFold applies the ContainsFold predicate on the "STATUS" field.
func STATUSContainsFold(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSTATUS), v))
	})
}

// RemainEQ applies the EQ predicate on the "Remain" field.
func RemainEQ(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemain), v))
	})
}

// RemainNEQ applies the NEQ predicate on the "Remain" field.
func RemainNEQ(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemain), v))
	})
}

// RemainIn applies the In predicate on the "Remain" field.
func RemainIn(vs ...string) predicate.SubjectsOffered {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemain), v...))
	})
}

// RemainNotIn applies the NotIn predicate on the "Remain" field.
func RemainNotIn(vs ...string) predicate.SubjectsOffered {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemain), v...))
	})
}

// RemainGT applies the GT predicate on the "Remain" field.
func RemainGT(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemain), v))
	})
}

// RemainGTE applies the GTE predicate on the "Remain" field.
func RemainGTE(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemain), v))
	})
}

// RemainLT applies the LT predicate on the "Remain" field.
func RemainLT(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemain), v))
	})
}

// RemainLTE applies the LTE predicate on the "Remain" field.
func RemainLTE(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemain), v))
	})
}

// RemainContains applies the Contains predicate on the "Remain" field.
func RemainContains(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemain), v))
	})
}

// RemainHasPrefix applies the HasPrefix predicate on the "Remain" field.
func RemainHasPrefix(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemain), v))
	})
}

// RemainHasSuffix applies the HasSuffix predicate on the "Remain" field.
func RemainHasSuffix(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemain), v))
	})
}

// RemainEqualFold applies the EqualFold predicate on the "Remain" field.
func RemainEqualFold(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemain), v))
	})
}

// RemainContainsFold applies the ContainsFold predicate on the "Remain" field.
func RemainContainsFold(v string) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemain), v))
	})
}

// HasSubject applies the HasEdge predicate on the "Subject" edge.
func HasSubject() predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubjectTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubjectTable, SubjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjectWith applies the HasEdge predicate on the "Subject" edge with a given conditions (other predicates).
func HasSubjectWith(preds ...predicate.Subject) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubjectInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, SubjectTable, SubjectColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDegree applies the HasEdge predicate on the "Degree" edge.
func HasDegree() predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DegreeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DegreeTable, DegreeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDegreeWith applies the HasEdge predicate on the "Degree" edge with a given conditions (other predicates).
func HasDegreeWith(preds ...predicate.Degree) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DegreeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DegreeTable, DegreeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasYear applies the HasEdge predicate on the "Year" edge.
func HasYear() predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(YearTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, YearTable, YearColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasYearWith applies the HasEdge predicate on the "Year" edge with a given conditions (other predicates).
func HasYearWith(preds ...predicate.Year) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(YearInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, YearTable, YearColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTerm applies the HasEdge predicate on the "Term" edge.
func HasTerm() predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TermTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TermTable, TermColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTermWith applies the HasEdge predicate on the "Term" edge with a given conditions (other predicates).
func HasTermWith(preds ...predicate.Term) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(TermInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TermTable, TermColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.SubjectsOffered) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.SubjectsOffered) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SubjectsOffered) predicate.SubjectsOffered {
	return predicate.SubjectsOffered(func(s *sql.Selector) {
		p(s.Not())
	})
}
