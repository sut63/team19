// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team19/app/ent/degree"
	"github.com/team19/app/ent/subject"
	"github.com/team19/app/ent/subjectsoffered"
	"github.com/team19/app/ent/term"
	"github.com/team19/app/ent/year"
)

// SubjectsOfferedCreate is the builder for creating a SubjectsOffered entity.
type SubjectsOfferedCreate struct {
	config
	mutation *SubjectsOfferedMutation
	hooks    []Hook
}

// SetAMOUNT sets the AMOUNT field.
func (soc *SubjectsOfferedCreate) SetAMOUNT(s string) *SubjectsOfferedCreate {
	soc.mutation.SetAMOUNT(s)
	return soc
}

// SetSTATUS sets the STATUS field.
func (soc *SubjectsOfferedCreate) SetSTATUS(s string) *SubjectsOfferedCreate {
	soc.mutation.SetSTATUS(s)
	return soc
}

// SetSubjectID sets the Subject edge to Subject by id.
func (soc *SubjectsOfferedCreate) SetSubjectID(id int) *SubjectsOfferedCreate {
	soc.mutation.SetSubjectID(id)
	return soc
}

// SetNillableSubjectID sets the Subject edge to Subject by id if the given value is not nil.
func (soc *SubjectsOfferedCreate) SetNillableSubjectID(id *int) *SubjectsOfferedCreate {
	if id != nil {
		soc = soc.SetSubjectID(*id)
	}
	return soc
}

// SetSubject sets the Subject edge to Subject.
func (soc *SubjectsOfferedCreate) SetSubject(s *Subject) *SubjectsOfferedCreate {
	return soc.SetSubjectID(s.ID)
}

// SetDegreeID sets the Degree edge to Degree by id.
func (soc *SubjectsOfferedCreate) SetDegreeID(id int) *SubjectsOfferedCreate {
	soc.mutation.SetDegreeID(id)
	return soc
}

// SetNillableDegreeID sets the Degree edge to Degree by id if the given value is not nil.
func (soc *SubjectsOfferedCreate) SetNillableDegreeID(id *int) *SubjectsOfferedCreate {
	if id != nil {
		soc = soc.SetDegreeID(*id)
	}
	return soc
}

// SetDegree sets the Degree edge to Degree.
func (soc *SubjectsOfferedCreate) SetDegree(d *Degree) *SubjectsOfferedCreate {
	return soc.SetDegreeID(d.ID)
}

// SetYearID sets the Year edge to Year by id.
func (soc *SubjectsOfferedCreate) SetYearID(id int) *SubjectsOfferedCreate {
	soc.mutation.SetYearID(id)
	return soc
}

// SetNillableYearID sets the Year edge to Year by id if the given value is not nil.
func (soc *SubjectsOfferedCreate) SetNillableYearID(id *int) *SubjectsOfferedCreate {
	if id != nil {
		soc = soc.SetYearID(*id)
	}
	return soc
}

// SetYear sets the Year edge to Year.
func (soc *SubjectsOfferedCreate) SetYear(y *Year) *SubjectsOfferedCreate {
	return soc.SetYearID(y.ID)
}

// SetTermID sets the Term edge to Term by id.
func (soc *SubjectsOfferedCreate) SetTermID(id int) *SubjectsOfferedCreate {
	soc.mutation.SetTermID(id)
	return soc
}

// SetNillableTermID sets the Term edge to Term by id if the given value is not nil.
func (soc *SubjectsOfferedCreate) SetNillableTermID(id *int) *SubjectsOfferedCreate {
	if id != nil {
		soc = soc.SetTermID(*id)
	}
	return soc
}

// SetTerm sets the Term edge to Term.
func (soc *SubjectsOfferedCreate) SetTerm(t *Term) *SubjectsOfferedCreate {
	return soc.SetTermID(t.ID)
}

// Mutation returns the SubjectsOfferedMutation object of the builder.
func (soc *SubjectsOfferedCreate) Mutation() *SubjectsOfferedMutation {
	return soc.mutation
}

// Save creates the SubjectsOffered in the database.
func (soc *SubjectsOfferedCreate) Save(ctx context.Context) (*SubjectsOffered, error) {
	if _, ok := soc.mutation.AMOUNT(); !ok {
		return nil, &ValidationError{Name: "AMOUNT", err: errors.New("ent: missing required field \"AMOUNT\"")}
	}
	if v, ok := soc.mutation.AMOUNT(); ok {
		if err := subjectsoffered.AMOUNTValidator(v); err != nil {
			return nil, &ValidationError{Name: "AMOUNT", err: fmt.Errorf("ent: validator failed for field \"AMOUNT\": %w", err)}
		}
	}
	if _, ok := soc.mutation.STATUS(); !ok {
		return nil, &ValidationError{Name: "STATUS", err: errors.New("ent: missing required field \"STATUS\"")}
	}
	if v, ok := soc.mutation.STATUS(); ok {
		if err := subjectsoffered.STATUSValidator(v); err != nil {
			return nil, &ValidationError{Name: "STATUS", err: fmt.Errorf("ent: validator failed for field \"STATUS\": %w", err)}
		}
	}
	var (
		err  error
		node *SubjectsOffered
	)
	if len(soc.hooks) == 0 {
		node, err = soc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectsOfferedMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			soc.mutation = mutation
			node, err = soc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(soc.hooks) - 1; i >= 0; i-- {
			mut = soc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, soc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (soc *SubjectsOfferedCreate) SaveX(ctx context.Context) *SubjectsOffered {
	v, err := soc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (soc *SubjectsOfferedCreate) sqlSave(ctx context.Context) (*SubjectsOffered, error) {
	so, _spec := soc.createSpec()
	if err := sqlgraph.CreateNode(ctx, soc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	so.ID = int(id)
	return so, nil
}

func (soc *SubjectsOfferedCreate) createSpec() (*SubjectsOffered, *sqlgraph.CreateSpec) {
	var (
		so    = &SubjectsOffered{config: soc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: subjectsoffered.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subjectsoffered.FieldID,
			},
		}
	)
	if value, ok := soc.mutation.AMOUNT(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subjectsoffered.FieldAMOUNT,
		})
		so.AMOUNT = value
	}
	if value, ok := soc.mutation.STATUS(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subjectsoffered.FieldSTATUS,
		})
		so.STATUS = value
	}
	if nodes := soc.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.SubjectTable,
			Columns: []string{subjectsoffered.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := soc.mutation.DegreeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.DegreeTable,
			Columns: []string{subjectsoffered.DegreeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := soc.mutation.YearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.YearTable,
			Columns: []string{subjectsoffered.YearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: year.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := soc.mutation.TermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subjectsoffered.TermTable,
			Columns: []string{subjectsoffered.TermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return so, _spec
}
