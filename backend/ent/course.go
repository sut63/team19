// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/team19/app/ent/course"
	"github.com/team19/app/ent/degree"
	"github.com/team19/app/ent/department"
	"github.com/team19/app/ent/subject"
)

// Course is the model entity for the Course schema.
type Course struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CourseYear holds the value of the "Course_year" field.
	CourseYear int `json:"Course_year,omitempty"`
	// CourseName holds the value of the "Course_name" field.
	CourseName string `json:"Course_name,omitempty"`
	// TeacherID holds the value of the "Teacher_id" field.
	TeacherID string `json:"Teacher_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CourseQuery when eager-loading is set.
	Edges         CourseEdges `json:"edges"`
	Degree_id     *int
	department_id *int
	Subject_id    *int
}

// CourseEdges holds the relations/edges for other nodes in the graph.
type CourseEdges struct {
	// DepartmentID holds the value of the Department_id edge.
	DepartmentID *Department
	// DegreeID holds the value of the Degree_id edge.
	DegreeID *Degree
	// SubjectID holds the value of the Subject_id edge.
	SubjectID *Subject
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DepartmentIDOrErr returns the DepartmentID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseEdges) DepartmentIDOrErr() (*Department, error) {
	if e.loadedTypes[0] {
		if e.DepartmentID == nil {
			// The edge Department_id was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: department.Label}
		}
		return e.DepartmentID, nil
	}
	return nil, &NotLoadedError{edge: "Department_id"}
}

// DegreeIDOrErr returns the DegreeID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseEdges) DegreeIDOrErr() (*Degree, error) {
	if e.loadedTypes[1] {
		if e.DegreeID == nil {
			// The edge Degree_id was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: degree.Label}
		}
		return e.DegreeID, nil
	}
	return nil, &NotLoadedError{edge: "Degree_id"}
}

// SubjectIDOrErr returns the SubjectID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseEdges) SubjectIDOrErr() (*Subject, error) {
	if e.loadedTypes[2] {
		if e.SubjectID == nil {
			// The edge Subject_id was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subject.Label}
		}
		return e.SubjectID, nil
	}
	return nil, &NotLoadedError{edge: "Subject_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Course) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullInt64{},  // Course_year
		&sql.NullString{}, // Course_name
		&sql.NullString{}, // Teacher_id
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Course) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // Degree_id
		&sql.NullInt64{}, // department_id
		&sql.NullInt64{}, // Subject_id
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Course fields.
func (c *Course) assignValues(values ...interface{}) error {
	if m, n := len(values), len(course.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field Course_year", values[0])
	} else if value.Valid {
		c.CourseYear = int(value.Int64)
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Course_name", values[1])
	} else if value.Valid {
		c.CourseName = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Teacher_id", values[2])
	} else if value.Valid {
		c.TeacherID = value.String
	}
	values = values[3:]
	if len(values) == len(course.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Degree_id", value)
		} else if value.Valid {
			c.Degree_id = new(int)
			*c.Degree_id = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field department_id", value)
		} else if value.Valid {
			c.department_id = new(int)
			*c.department_id = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field Subject_id", value)
		} else if value.Valid {
			c.Subject_id = new(int)
			*c.Subject_id = int(value.Int64)
		}
	}
	return nil
}

// QueryDepartmentID queries the Department_id edge of the Course.
func (c *Course) QueryDepartmentID() *DepartmentQuery {
	return (&CourseClient{config: c.config}).QueryDepartmentID(c)
}

// QueryDegreeID queries the Degree_id edge of the Course.
func (c *Course) QueryDegreeID() *DegreeQuery {
	return (&CourseClient{config: c.config}).QueryDegreeID(c)
}

// QuerySubjectID queries the Subject_id edge of the Course.
func (c *Course) QuerySubjectID() *SubjectQuery {
	return (&CourseClient{config: c.config}).QuerySubjectID(c)
}

// Update returns a builder for updating this Course.
// Note that, you need to call Course.Unwrap() before calling this method, if this Course
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Course) Update() *CourseUpdateOne {
	return (&CourseClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Course) Unwrap() *Course {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Course is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Course) String() string {
	var builder strings.Builder
	builder.WriteString("Course(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", Course_year=")
	builder.WriteString(fmt.Sprintf("%v", c.CourseYear))
	builder.WriteString(", Course_name=")
	builder.WriteString(c.CourseName)
	builder.WriteString(", Teacher_id=")
	builder.WriteString(c.TeacherID)
	builder.WriteByte(')')
	return builder.String()
}

// Courses is a parsable slice of Course.
type Courses []*Course

func (c Courses) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
