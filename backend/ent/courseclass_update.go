// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/team19/app/ent/classdate"
	"github.com/team19/app/ent/classroom"
	"github.com/team19/app/ent/classtime"
	"github.com/team19/app/ent/courseclass"
	"github.com/team19/app/ent/instructorinfo"
	"github.com/team19/app/ent/predicate"
	"github.com/team19/app/ent/subject"
)

// CourseclassUpdate is the builder for updating Courseclass entities.
type CourseclassUpdate struct {
	config
	hooks      []Hook
	mutation   *CourseclassMutation
	predicates []predicate.Courseclass
}

// Where adds a new predicate for the builder.
func (cu *CourseclassUpdate) Where(ps ...predicate.Courseclass) *CourseclassUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetTablecode sets the tablecode field.
func (cu *CourseclassUpdate) SetTablecode(s string) *CourseclassUpdate {
	cu.mutation.SetTablecode(s)
	return cu
}

// SetGroupClass sets the GroupClass field.
func (cu *CourseclassUpdate) SetGroupClass(s string) *CourseclassUpdate {
	cu.mutation.SetGroupClass(s)
	return cu
}

// SetAnnotation sets the Annotation field.
func (cu *CourseclassUpdate) SetAnnotation(s string) *CourseclassUpdate {
	cu.mutation.SetAnnotation(s)
	return cu
}

// SetClasstimeID sets the classtime edge to Classtime by id.
func (cu *CourseclassUpdate) SetClasstimeID(id int) *CourseclassUpdate {
	cu.mutation.SetClasstimeID(id)
	return cu
}

// SetNillableClasstimeID sets the classtime edge to Classtime by id if the given value is not nil.
func (cu *CourseclassUpdate) SetNillableClasstimeID(id *int) *CourseclassUpdate {
	if id != nil {
		cu = cu.SetClasstimeID(*id)
	}
	return cu
}

// SetClasstime sets the classtime edge to Classtime.
func (cu *CourseclassUpdate) SetClasstime(c *Classtime) *CourseclassUpdate {
	return cu.SetClasstimeID(c.ID)
}

// SetClassdateID sets the classdate edge to Classdate by id.
func (cu *CourseclassUpdate) SetClassdateID(id int) *CourseclassUpdate {
	cu.mutation.SetClassdateID(id)
	return cu
}

// SetNillableClassdateID sets the classdate edge to Classdate by id if the given value is not nil.
func (cu *CourseclassUpdate) SetNillableClassdateID(id *int) *CourseclassUpdate {
	if id != nil {
		cu = cu.SetClassdateID(*id)
	}
	return cu
}

// SetClassdate sets the classdate edge to Classdate.
func (cu *CourseclassUpdate) SetClassdate(c *Classdate) *CourseclassUpdate {
	return cu.SetClassdateID(c.ID)
}

// SetClassroomID sets the classroom edge to Classroom by id.
func (cu *CourseclassUpdate) SetClassroomID(id int) *CourseclassUpdate {
	cu.mutation.SetClassroomID(id)
	return cu
}

// SetNillableClassroomID sets the classroom edge to Classroom by id if the given value is not nil.
func (cu *CourseclassUpdate) SetNillableClassroomID(id *int) *CourseclassUpdate {
	if id != nil {
		cu = cu.SetClassroomID(*id)
	}
	return cu
}

// SetClassroom sets the classroom edge to Classroom.
func (cu *CourseclassUpdate) SetClassroom(c *Classroom) *CourseclassUpdate {
	return cu.SetClassroomID(c.ID)
}

// SetInstructorInfoID sets the instructorInfo edge to InstructorInfo by id.
func (cu *CourseclassUpdate) SetInstructorInfoID(id int) *CourseclassUpdate {
	cu.mutation.SetInstructorInfoID(id)
	return cu
}

// SetNillableInstructorInfoID sets the instructorInfo edge to InstructorInfo by id if the given value is not nil.
func (cu *CourseclassUpdate) SetNillableInstructorInfoID(id *int) *CourseclassUpdate {
	if id != nil {
		cu = cu.SetInstructorInfoID(*id)
	}
	return cu
}

// SetInstructorInfo sets the instructorInfo edge to InstructorInfo.
func (cu *CourseclassUpdate) SetInstructorInfo(i *InstructorInfo) *CourseclassUpdate {
	return cu.SetInstructorInfoID(i.ID)
}

// SetSubjectID sets the subject edge to Subject by id.
func (cu *CourseclassUpdate) SetSubjectID(id int) *CourseclassUpdate {
	cu.mutation.SetSubjectID(id)
	return cu
}

// SetNillableSubjectID sets the subject edge to Subject by id if the given value is not nil.
func (cu *CourseclassUpdate) SetNillableSubjectID(id *int) *CourseclassUpdate {
	if id != nil {
		cu = cu.SetSubjectID(*id)
	}
	return cu
}

// SetSubject sets the subject edge to Subject.
func (cu *CourseclassUpdate) SetSubject(s *Subject) *CourseclassUpdate {
	return cu.SetSubjectID(s.ID)
}

// Mutation returns the CourseclassMutation object of the builder.
func (cu *CourseclassUpdate) Mutation() *CourseclassMutation {
	return cu.mutation
}

// ClearClasstime clears the classtime edge to Classtime.
func (cu *CourseclassUpdate) ClearClasstime() *CourseclassUpdate {
	cu.mutation.ClearClasstime()
	return cu
}

// ClearClassdate clears the classdate edge to Classdate.
func (cu *CourseclassUpdate) ClearClassdate() *CourseclassUpdate {
	cu.mutation.ClearClassdate()
	return cu
}

// ClearClassroom clears the classroom edge to Classroom.
func (cu *CourseclassUpdate) ClearClassroom() *CourseclassUpdate {
	cu.mutation.ClearClassroom()
	return cu
}

// ClearInstructorInfo clears the instructorInfo edge to InstructorInfo.
func (cu *CourseclassUpdate) ClearInstructorInfo() *CourseclassUpdate {
	cu.mutation.ClearInstructorInfo()
	return cu
}

// ClearSubject clears the subject edge to Subject.
func (cu *CourseclassUpdate) ClearSubject() *CourseclassUpdate {
	cu.mutation.ClearSubject()
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CourseclassUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := cu.mutation.Tablecode(); ok {
		if err := courseclass.TablecodeValidator(v); err != nil {
			return 0, &ValidationError{Name: "tablecode", err: fmt.Errorf("ent: validator failed for field \"tablecode\": %w", err)}
		}
	}
	if v, ok := cu.mutation.GroupClass(); ok {
		if err := courseclass.GroupClassValidator(v); err != nil {
			return 0, &ValidationError{Name: "GroupClass", err: fmt.Errorf("ent: validator failed for field \"GroupClass\": %w", err)}
		}
	}
	if v, ok := cu.mutation.Annotation(); ok {
		if err := courseclass.AnnotationValidator(v); err != nil {
			return 0, &ValidationError{Name: "Annotation", err: fmt.Errorf("ent: validator failed for field \"Annotation\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseclassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CourseclassUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CourseclassUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CourseclassUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CourseclassUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   courseclass.Table,
			Columns: courseclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: courseclass.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Tablecode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: courseclass.FieldTablecode,
		})
	}
	if value, ok := cu.mutation.GroupClass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: courseclass.FieldGroupClass,
		})
	}
	if value, ok := cu.mutation.Annotation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: courseclass.FieldAnnotation,
		})
	}
	if cu.mutation.ClasstimeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClasstimeTable,
			Columns: []string{courseclass.ClasstimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classtime.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClasstimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClasstimeTable,
			Columns: []string{courseclass.ClasstimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classtime.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClassdateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClassdateTable,
			Columns: []string{courseclass.ClassdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classdate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClassdateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClassdateTable,
			Columns: []string{courseclass.ClassdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classdate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ClassroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClassroomTable,
			Columns: []string{courseclass.ClassroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ClassroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClassroomTable,
			Columns: []string{courseclass.ClassroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.InstructorInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.InstructorInfoTable,
			Columns: []string{courseclass.InstructorInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.InstructorInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.InstructorInfoTable,
			Columns: []string{courseclass.InstructorInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.SubjectTable,
			Columns: []string{courseclass.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.SubjectTable,
			Columns: []string{courseclass.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{courseclass.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CourseclassUpdateOne is the builder for updating a single Courseclass entity.
type CourseclassUpdateOne struct {
	config
	hooks    []Hook
	mutation *CourseclassMutation
}

// SetTablecode sets the tablecode field.
func (cuo *CourseclassUpdateOne) SetTablecode(s string) *CourseclassUpdateOne {
	cuo.mutation.SetTablecode(s)
	return cuo
}

// SetGroupClass sets the GroupClass field.
func (cuo *CourseclassUpdateOne) SetGroupClass(s string) *CourseclassUpdateOne {
	cuo.mutation.SetGroupClass(s)
	return cuo
}

// SetAnnotation sets the Annotation field.
func (cuo *CourseclassUpdateOne) SetAnnotation(s string) *CourseclassUpdateOne {
	cuo.mutation.SetAnnotation(s)
	return cuo
}

// SetClasstimeID sets the classtime edge to Classtime by id.
func (cuo *CourseclassUpdateOne) SetClasstimeID(id int) *CourseclassUpdateOne {
	cuo.mutation.SetClasstimeID(id)
	return cuo
}

// SetNillableClasstimeID sets the classtime edge to Classtime by id if the given value is not nil.
func (cuo *CourseclassUpdateOne) SetNillableClasstimeID(id *int) *CourseclassUpdateOne {
	if id != nil {
		cuo = cuo.SetClasstimeID(*id)
	}
	return cuo
}

// SetClasstime sets the classtime edge to Classtime.
func (cuo *CourseclassUpdateOne) SetClasstime(c *Classtime) *CourseclassUpdateOne {
	return cuo.SetClasstimeID(c.ID)
}

// SetClassdateID sets the classdate edge to Classdate by id.
func (cuo *CourseclassUpdateOne) SetClassdateID(id int) *CourseclassUpdateOne {
	cuo.mutation.SetClassdateID(id)
	return cuo
}

// SetNillableClassdateID sets the classdate edge to Classdate by id if the given value is not nil.
func (cuo *CourseclassUpdateOne) SetNillableClassdateID(id *int) *CourseclassUpdateOne {
	if id != nil {
		cuo = cuo.SetClassdateID(*id)
	}
	return cuo
}

// SetClassdate sets the classdate edge to Classdate.
func (cuo *CourseclassUpdateOne) SetClassdate(c *Classdate) *CourseclassUpdateOne {
	return cuo.SetClassdateID(c.ID)
}

// SetClassroomID sets the classroom edge to Classroom by id.
func (cuo *CourseclassUpdateOne) SetClassroomID(id int) *CourseclassUpdateOne {
	cuo.mutation.SetClassroomID(id)
	return cuo
}

// SetNillableClassroomID sets the classroom edge to Classroom by id if the given value is not nil.
func (cuo *CourseclassUpdateOne) SetNillableClassroomID(id *int) *CourseclassUpdateOne {
	if id != nil {
		cuo = cuo.SetClassroomID(*id)
	}
	return cuo
}

// SetClassroom sets the classroom edge to Classroom.
func (cuo *CourseclassUpdateOne) SetClassroom(c *Classroom) *CourseclassUpdateOne {
	return cuo.SetClassroomID(c.ID)
}

// SetInstructorInfoID sets the instructorInfo edge to InstructorInfo by id.
func (cuo *CourseclassUpdateOne) SetInstructorInfoID(id int) *CourseclassUpdateOne {
	cuo.mutation.SetInstructorInfoID(id)
	return cuo
}

// SetNillableInstructorInfoID sets the instructorInfo edge to InstructorInfo by id if the given value is not nil.
func (cuo *CourseclassUpdateOne) SetNillableInstructorInfoID(id *int) *CourseclassUpdateOne {
	if id != nil {
		cuo = cuo.SetInstructorInfoID(*id)
	}
	return cuo
}

// SetInstructorInfo sets the instructorInfo edge to InstructorInfo.
func (cuo *CourseclassUpdateOne) SetInstructorInfo(i *InstructorInfo) *CourseclassUpdateOne {
	return cuo.SetInstructorInfoID(i.ID)
}

// SetSubjectID sets the subject edge to Subject by id.
func (cuo *CourseclassUpdateOne) SetSubjectID(id int) *CourseclassUpdateOne {
	cuo.mutation.SetSubjectID(id)
	return cuo
}

// SetNillableSubjectID sets the subject edge to Subject by id if the given value is not nil.
func (cuo *CourseclassUpdateOne) SetNillableSubjectID(id *int) *CourseclassUpdateOne {
	if id != nil {
		cuo = cuo.SetSubjectID(*id)
	}
	return cuo
}

// SetSubject sets the subject edge to Subject.
func (cuo *CourseclassUpdateOne) SetSubject(s *Subject) *CourseclassUpdateOne {
	return cuo.SetSubjectID(s.ID)
}

// Mutation returns the CourseclassMutation object of the builder.
func (cuo *CourseclassUpdateOne) Mutation() *CourseclassMutation {
	return cuo.mutation
}

// ClearClasstime clears the classtime edge to Classtime.
func (cuo *CourseclassUpdateOne) ClearClasstime() *CourseclassUpdateOne {
	cuo.mutation.ClearClasstime()
	return cuo
}

// ClearClassdate clears the classdate edge to Classdate.
func (cuo *CourseclassUpdateOne) ClearClassdate() *CourseclassUpdateOne {
	cuo.mutation.ClearClassdate()
	return cuo
}

// ClearClassroom clears the classroom edge to Classroom.
func (cuo *CourseclassUpdateOne) ClearClassroom() *CourseclassUpdateOne {
	cuo.mutation.ClearClassroom()
	return cuo
}

// ClearInstructorInfo clears the instructorInfo edge to InstructorInfo.
func (cuo *CourseclassUpdateOne) ClearInstructorInfo() *CourseclassUpdateOne {
	cuo.mutation.ClearInstructorInfo()
	return cuo
}

// ClearSubject clears the subject edge to Subject.
func (cuo *CourseclassUpdateOne) ClearSubject() *CourseclassUpdateOne {
	cuo.mutation.ClearSubject()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *CourseclassUpdateOne) Save(ctx context.Context) (*Courseclass, error) {
	if v, ok := cuo.mutation.Tablecode(); ok {
		if err := courseclass.TablecodeValidator(v); err != nil {
			return nil, &ValidationError{Name: "tablecode", err: fmt.Errorf("ent: validator failed for field \"tablecode\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.GroupClass(); ok {
		if err := courseclass.GroupClassValidator(v); err != nil {
			return nil, &ValidationError{Name: "GroupClass", err: fmt.Errorf("ent: validator failed for field \"GroupClass\": %w", err)}
		}
	}
	if v, ok := cuo.mutation.Annotation(); ok {
		if err := courseclass.AnnotationValidator(v); err != nil {
			return nil, &ValidationError{Name: "Annotation", err: fmt.Errorf("ent: validator failed for field \"Annotation\": %w", err)}
		}
	}

	var (
		err  error
		node *Courseclass
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseclassMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CourseclassUpdateOne) SaveX(ctx context.Context) *Courseclass {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *CourseclassUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CourseclassUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CourseclassUpdateOne) sqlSave(ctx context.Context) (c *Courseclass, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   courseclass.Table,
			Columns: courseclass.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: courseclass.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Courseclass.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Tablecode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: courseclass.FieldTablecode,
		})
	}
	if value, ok := cuo.mutation.GroupClass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: courseclass.FieldGroupClass,
		})
	}
	if value, ok := cuo.mutation.Annotation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: courseclass.FieldAnnotation,
		})
	}
	if cuo.mutation.ClasstimeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClasstimeTable,
			Columns: []string{courseclass.ClasstimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classtime.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClasstimeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClasstimeTable,
			Columns: []string{courseclass.ClasstimeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classtime.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClassdateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClassdateTable,
			Columns: []string{courseclass.ClassdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classdate.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClassdateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClassdateTable,
			Columns: []string{courseclass.ClassdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classdate.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ClassroomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClassroomTable,
			Columns: []string{courseclass.ClassroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classroom.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ClassroomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.ClassroomTable,
			Columns: []string{courseclass.ClassroomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: classroom.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.InstructorInfoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.InstructorInfoTable,
			Columns: []string{courseclass.InstructorInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorinfo.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.InstructorInfoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.InstructorInfoTable,
			Columns: []string{courseclass.InstructorInfoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: instructorinfo.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.SubjectTable,
			Columns: []string{courseclass.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   courseclass.SubjectTable,
			Columns: []string{courseclass.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Courseclass{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{courseclass.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
